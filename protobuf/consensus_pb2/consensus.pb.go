// Copyright 2018 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: protobuf/consensus_pb2/consensus.proto

package consensus

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConsensusRegisterResponse_Status int32

const (
	ConsensusRegisterResponse_STATUS_UNSET  ConsensusRegisterResponse_Status = 0
	ConsensusRegisterResponse_OK            ConsensusRegisterResponse_Status = 1
	ConsensusRegisterResponse_BAD_REQUEST   ConsensusRegisterResponse_Status = 2
	ConsensusRegisterResponse_SERVICE_ERROR ConsensusRegisterResponse_Status = 3
	ConsensusRegisterResponse_NOT_READY     ConsensusRegisterResponse_Status = 4
)

// Enum value maps for ConsensusRegisterResponse_Status.
var (
	ConsensusRegisterResponse_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "OK",
		2: "BAD_REQUEST",
		3: "SERVICE_ERROR",
		4: "NOT_READY",
	}
	ConsensusRegisterResponse_Status_value = map[string]int32{
		"STATUS_UNSET":  0,
		"OK":            1,
		"BAD_REQUEST":   2,
		"SERVICE_ERROR": 3,
		"NOT_READY":     4,
	}
)

func (x ConsensusRegisterResponse_Status) Enum() *ConsensusRegisterResponse_Status {
	p := new(ConsensusRegisterResponse_Status)
	*p = x
	return p
}

func (x ConsensusRegisterResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsensusRegisterResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_consensus_pb2_consensus_proto_enumTypes[0].Descriptor()
}

func (ConsensusRegisterResponse_Status) Type() protoreflect.EnumType {
	return &file_protobuf_consensus_pb2_consensus_proto_enumTypes[0]
}

func (x ConsensusRegisterResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsensusRegisterResponse_Status.Descriptor instead.
func (ConsensusRegisterResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{6, 0}
}

type ConsensusSendToResponse_Status int32

const (
	ConsensusSendToResponse_STATUS_UNSET  ConsensusSendToResponse_Status = 0
	ConsensusSendToResponse_OK            ConsensusSendToResponse_Status = 1
	ConsensusSendToResponse_BAD_REQUEST   ConsensusSendToResponse_Status = 2
	ConsensusSendToResponse_SERVICE_ERROR ConsensusSendToResponse_Status = 3
	ConsensusSendToResponse_NOT_READY     ConsensusSendToResponse_Status = 4
	ConsensusSendToResponse_UNKNOWN_PEER  ConsensusSendToResponse_Status = 5
)

// Enum value maps for ConsensusSendToResponse_Status.
var (
	ConsensusSendToResponse_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "OK",
		2: "BAD_REQUEST",
		3: "SERVICE_ERROR",
		4: "NOT_READY",
		5: "UNKNOWN_PEER",
	}
	ConsensusSendToResponse_Status_value = map[string]int32{
		"STATUS_UNSET":  0,
		"OK":            1,
		"BAD_REQUEST":   2,
		"SERVICE_ERROR": 3,
		"NOT_READY":     4,
		"UNKNOWN_PEER":  5,
	}
)

func (x ConsensusSendToResponse_Status) Enum() *ConsensusSendToResponse_Status {
	p := new(ConsensusSendToResponse_Status)
	*p = x
	return p
}

func (x ConsensusSendToResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsensusSendToResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_consensus_pb2_consensus_proto_enumTypes[1].Descriptor()
}

func (ConsensusSendToResponse_Status) Type() protoreflect.EnumType {
	return &file_protobuf_consensus_pb2_consensus_proto_enumTypes[1]
}

func (x ConsensusSendToResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsensusSendToResponse_Status.Descriptor instead.
func (ConsensusSendToResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{16, 0}
}

type ConsensusBroadcastResponse_Status int32

const (
	ConsensusBroadcastResponse_STATUS_UNSET  ConsensusBroadcastResponse_Status = 0
	ConsensusBroadcastResponse_OK            ConsensusBroadcastResponse_Status = 1
	ConsensusBroadcastResponse_BAD_REQUEST   ConsensusBroadcastResponse_Status = 2
	ConsensusBroadcastResponse_SERVICE_ERROR ConsensusBroadcastResponse_Status = 3
	ConsensusBroadcastResponse_NOT_READY     ConsensusBroadcastResponse_Status = 4
)

// Enum value maps for ConsensusBroadcastResponse_Status.
var (
	ConsensusBroadcastResponse_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "OK",
		2: "BAD_REQUEST",
		3: "SERVICE_ERROR",
		4: "NOT_READY",
	}
	ConsensusBroadcastResponse_Status_value = map[string]int32{
		"STATUS_UNSET":  0,
		"OK":            1,
		"BAD_REQUEST":   2,
		"SERVICE_ERROR": 3,
		"NOT_READY":     4,
	}
)

func (x ConsensusBroadcastResponse_Status) Enum() *ConsensusBroadcastResponse_Status {
	p := new(ConsensusBroadcastResponse_Status)
	*p = x
	return p
}

func (x ConsensusBroadcastResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsensusBroadcastResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_consensus_pb2_consensus_proto_enumTypes[2].Descriptor()
}

func (ConsensusBroadcastResponse_Status) Type() protoreflect.EnumType {
	return &file_protobuf_consensus_pb2_consensus_proto_enumTypes[2]
}

func (x ConsensusBroadcastResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsensusBroadcastResponse_Status.Descriptor instead.
func (ConsensusBroadcastResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{18, 0}
}

type ConsensusInitializeBlockResponse_Status int32

const (
	ConsensusInitializeBlockResponse_STATUS_UNSET  ConsensusInitializeBlockResponse_Status = 0
	ConsensusInitializeBlockResponse_OK            ConsensusInitializeBlockResponse_Status = 1
	ConsensusInitializeBlockResponse_BAD_REQUEST   ConsensusInitializeBlockResponse_Status = 2
	ConsensusInitializeBlockResponse_SERVICE_ERROR ConsensusInitializeBlockResponse_Status = 3
	ConsensusInitializeBlockResponse_NOT_READY     ConsensusInitializeBlockResponse_Status = 4
	ConsensusInitializeBlockResponse_INVALID_STATE ConsensusInitializeBlockResponse_Status = 5
	ConsensusInitializeBlockResponse_UNKNOWN_BLOCK ConsensusInitializeBlockResponse_Status = 6
)

// Enum value maps for ConsensusInitializeBlockResponse_Status.
var (
	ConsensusInitializeBlockResponse_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "OK",
		2: "BAD_REQUEST",
		3: "SERVICE_ERROR",
		4: "NOT_READY",
		5: "INVALID_STATE",
		6: "UNKNOWN_BLOCK",
	}
	ConsensusInitializeBlockResponse_Status_value = map[string]int32{
		"STATUS_UNSET":  0,
		"OK":            1,
		"BAD_REQUEST":   2,
		"SERVICE_ERROR": 3,
		"NOT_READY":     4,
		"INVALID_STATE": 5,
		"UNKNOWN_BLOCK": 6,
	}
)

func (x ConsensusInitializeBlockResponse_Status) Enum() *ConsensusInitializeBlockResponse_Status {
	p := new(ConsensusInitializeBlockResponse_Status)
	*p = x
	return p
}

func (x ConsensusInitializeBlockResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsensusInitializeBlockResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_consensus_pb2_consensus_proto_enumTypes[3].Descriptor()
}

func (ConsensusInitializeBlockResponse_Status) Type() protoreflect.EnumType {
	return &file_protobuf_consensus_pb2_consensus_proto_enumTypes[3]
}

func (x ConsensusInitializeBlockResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsensusInitializeBlockResponse_Status.Descriptor instead.
func (ConsensusInitializeBlockResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{20, 0}
}

type ConsensusSummarizeBlockResponse_Status int32

const (
	ConsensusSummarizeBlockResponse_STATUS_UNSET    ConsensusSummarizeBlockResponse_Status = 0
	ConsensusSummarizeBlockResponse_OK              ConsensusSummarizeBlockResponse_Status = 1
	ConsensusSummarizeBlockResponse_BAD_REQUEST     ConsensusSummarizeBlockResponse_Status = 2
	ConsensusSummarizeBlockResponse_SERVICE_ERROR   ConsensusSummarizeBlockResponse_Status = 3
	ConsensusSummarizeBlockResponse_NOT_READY       ConsensusSummarizeBlockResponse_Status = 4
	ConsensusSummarizeBlockResponse_INVALID_STATE   ConsensusSummarizeBlockResponse_Status = 5
	ConsensusSummarizeBlockResponse_BLOCK_NOT_READY ConsensusSummarizeBlockResponse_Status = 6
)

// Enum value maps for ConsensusSummarizeBlockResponse_Status.
var (
	ConsensusSummarizeBlockResponse_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "OK",
		2: "BAD_REQUEST",
		3: "SERVICE_ERROR",
		4: "NOT_READY",
		5: "INVALID_STATE",
		6: "BLOCK_NOT_READY",
	}
	ConsensusSummarizeBlockResponse_Status_value = map[string]int32{
		"STATUS_UNSET":    0,
		"OK":              1,
		"BAD_REQUEST":     2,
		"SERVICE_ERROR":   3,
		"NOT_READY":       4,
		"INVALID_STATE":   5,
		"BLOCK_NOT_READY": 6,
	}
)

func (x ConsensusSummarizeBlockResponse_Status) Enum() *ConsensusSummarizeBlockResponse_Status {
	p := new(ConsensusSummarizeBlockResponse_Status)
	*p = x
	return p
}

func (x ConsensusSummarizeBlockResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsensusSummarizeBlockResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_consensus_pb2_consensus_proto_enumTypes[4].Descriptor()
}

func (ConsensusSummarizeBlockResponse_Status) Type() protoreflect.EnumType {
	return &file_protobuf_consensus_pb2_consensus_proto_enumTypes[4]
}

func (x ConsensusSummarizeBlockResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsensusSummarizeBlockResponse_Status.Descriptor instead.
func (ConsensusSummarizeBlockResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{22, 0}
}

type ConsensusFinalizeBlockResponse_Status int32

const (
	ConsensusFinalizeBlockResponse_STATUS_UNSET    ConsensusFinalizeBlockResponse_Status = 0
	ConsensusFinalizeBlockResponse_OK              ConsensusFinalizeBlockResponse_Status = 1
	ConsensusFinalizeBlockResponse_BAD_REQUEST     ConsensusFinalizeBlockResponse_Status = 2
	ConsensusFinalizeBlockResponse_SERVICE_ERROR   ConsensusFinalizeBlockResponse_Status = 3
	ConsensusFinalizeBlockResponse_NOT_READY       ConsensusFinalizeBlockResponse_Status = 4
	ConsensusFinalizeBlockResponse_INVALID_STATE   ConsensusFinalizeBlockResponse_Status = 5
	ConsensusFinalizeBlockResponse_BLOCK_NOT_READY ConsensusFinalizeBlockResponse_Status = 6
)

// Enum value maps for ConsensusFinalizeBlockResponse_Status.
var (
	ConsensusFinalizeBlockResponse_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "OK",
		2: "BAD_REQUEST",
		3: "SERVICE_ERROR",
		4: "NOT_READY",
		5: "INVALID_STATE",
		6: "BLOCK_NOT_READY",
	}
	ConsensusFinalizeBlockResponse_Status_value = map[string]int32{
		"STATUS_UNSET":    0,
		"OK":              1,
		"BAD_REQUEST":     2,
		"SERVICE_ERROR":   3,
		"NOT_READY":       4,
		"INVALID_STATE":   5,
		"BLOCK_NOT_READY": 6,
	}
)

func (x ConsensusFinalizeBlockResponse_Status) Enum() *ConsensusFinalizeBlockResponse_Status {
	p := new(ConsensusFinalizeBlockResponse_Status)
	*p = x
	return p
}

func (x ConsensusFinalizeBlockResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsensusFinalizeBlockResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_consensus_pb2_consensus_proto_enumTypes[5].Descriptor()
}

func (ConsensusFinalizeBlockResponse_Status) Type() protoreflect.EnumType {
	return &file_protobuf_consensus_pb2_consensus_proto_enumTypes[5]
}

func (x ConsensusFinalizeBlockResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsensusFinalizeBlockResponse_Status.Descriptor instead.
func (ConsensusFinalizeBlockResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{24, 0}
}

type ConsensusCancelBlockResponse_Status int32

const (
	ConsensusCancelBlockResponse_STATUS_UNSET  ConsensusCancelBlockResponse_Status = 0
	ConsensusCancelBlockResponse_OK            ConsensusCancelBlockResponse_Status = 1
	ConsensusCancelBlockResponse_BAD_REQUEST   ConsensusCancelBlockResponse_Status = 2
	ConsensusCancelBlockResponse_SERVICE_ERROR ConsensusCancelBlockResponse_Status = 3
	ConsensusCancelBlockResponse_NOT_READY     ConsensusCancelBlockResponse_Status = 4
	ConsensusCancelBlockResponse_INVALID_STATE ConsensusCancelBlockResponse_Status = 5
)

// Enum value maps for ConsensusCancelBlockResponse_Status.
var (
	ConsensusCancelBlockResponse_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "OK",
		2: "BAD_REQUEST",
		3: "SERVICE_ERROR",
		4: "NOT_READY",
		5: "INVALID_STATE",
	}
	ConsensusCancelBlockResponse_Status_value = map[string]int32{
		"STATUS_UNSET":  0,
		"OK":            1,
		"BAD_REQUEST":   2,
		"SERVICE_ERROR": 3,
		"NOT_READY":     4,
		"INVALID_STATE": 5,
	}
)

func (x ConsensusCancelBlockResponse_Status) Enum() *ConsensusCancelBlockResponse_Status {
	p := new(ConsensusCancelBlockResponse_Status)
	*p = x
	return p
}

func (x ConsensusCancelBlockResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsensusCancelBlockResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_consensus_pb2_consensus_proto_enumTypes[6].Descriptor()
}

func (ConsensusCancelBlockResponse_Status) Type() protoreflect.EnumType {
	return &file_protobuf_consensus_pb2_consensus_proto_enumTypes[6]
}

func (x ConsensusCancelBlockResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsensusCancelBlockResponse_Status.Descriptor instead.
func (ConsensusCancelBlockResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{26, 0}
}

type ConsensusCheckBlocksResponse_Status int32

const (
	ConsensusCheckBlocksResponse_STATUS_UNSET  ConsensusCheckBlocksResponse_Status = 0
	ConsensusCheckBlocksResponse_OK            ConsensusCheckBlocksResponse_Status = 1
	ConsensusCheckBlocksResponse_BAD_REQUEST   ConsensusCheckBlocksResponse_Status = 2
	ConsensusCheckBlocksResponse_SERVICE_ERROR ConsensusCheckBlocksResponse_Status = 3
	ConsensusCheckBlocksResponse_NOT_READY     ConsensusCheckBlocksResponse_Status = 4
	ConsensusCheckBlocksResponse_UNKNOWN_BLOCK ConsensusCheckBlocksResponse_Status = 5
)

// Enum value maps for ConsensusCheckBlocksResponse_Status.
var (
	ConsensusCheckBlocksResponse_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "OK",
		2: "BAD_REQUEST",
		3: "SERVICE_ERROR",
		4: "NOT_READY",
		5: "UNKNOWN_BLOCK",
	}
	ConsensusCheckBlocksResponse_Status_value = map[string]int32{
		"STATUS_UNSET":  0,
		"OK":            1,
		"BAD_REQUEST":   2,
		"SERVICE_ERROR": 3,
		"NOT_READY":     4,
		"UNKNOWN_BLOCK": 5,
	}
)

func (x ConsensusCheckBlocksResponse_Status) Enum() *ConsensusCheckBlocksResponse_Status {
	p := new(ConsensusCheckBlocksResponse_Status)
	*p = x
	return p
}

func (x ConsensusCheckBlocksResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsensusCheckBlocksResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_consensus_pb2_consensus_proto_enumTypes[7].Descriptor()
}

func (ConsensusCheckBlocksResponse_Status) Type() protoreflect.EnumType {
	return &file_protobuf_consensus_pb2_consensus_proto_enumTypes[7]
}

func (x ConsensusCheckBlocksResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsensusCheckBlocksResponse_Status.Descriptor instead.
func (ConsensusCheckBlocksResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{28, 0}
}

type ConsensusCommitBlockResponse_Status int32

const (
	ConsensusCommitBlockResponse_STATUS_UNSET  ConsensusCommitBlockResponse_Status = 0
	ConsensusCommitBlockResponse_OK            ConsensusCommitBlockResponse_Status = 1
	ConsensusCommitBlockResponse_BAD_REQUEST   ConsensusCommitBlockResponse_Status = 2
	ConsensusCommitBlockResponse_SERVICE_ERROR ConsensusCommitBlockResponse_Status = 3
	ConsensusCommitBlockResponse_NOT_READY     ConsensusCommitBlockResponse_Status = 4
	ConsensusCommitBlockResponse_UNKNOWN_BLOCK ConsensusCommitBlockResponse_Status = 5
)

// Enum value maps for ConsensusCommitBlockResponse_Status.
var (
	ConsensusCommitBlockResponse_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "OK",
		2: "BAD_REQUEST",
		3: "SERVICE_ERROR",
		4: "NOT_READY",
		5: "UNKNOWN_BLOCK",
	}
	ConsensusCommitBlockResponse_Status_value = map[string]int32{
		"STATUS_UNSET":  0,
		"OK":            1,
		"BAD_REQUEST":   2,
		"SERVICE_ERROR": 3,
		"NOT_READY":     4,
		"UNKNOWN_BLOCK": 5,
	}
)

func (x ConsensusCommitBlockResponse_Status) Enum() *ConsensusCommitBlockResponse_Status {
	p := new(ConsensusCommitBlockResponse_Status)
	*p = x
	return p
}

func (x ConsensusCommitBlockResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsensusCommitBlockResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_consensus_pb2_consensus_proto_enumTypes[8].Descriptor()
}

func (ConsensusCommitBlockResponse_Status) Type() protoreflect.EnumType {
	return &file_protobuf_consensus_pb2_consensus_proto_enumTypes[8]
}

func (x ConsensusCommitBlockResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsensusCommitBlockResponse_Status.Descriptor instead.
func (ConsensusCommitBlockResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{30, 0}
}

type ConsensusIgnoreBlockResponse_Status int32

const (
	ConsensusIgnoreBlockResponse_STATUS_UNSET  ConsensusIgnoreBlockResponse_Status = 0
	ConsensusIgnoreBlockResponse_OK            ConsensusIgnoreBlockResponse_Status = 1
	ConsensusIgnoreBlockResponse_BAD_REQUEST   ConsensusIgnoreBlockResponse_Status = 2
	ConsensusIgnoreBlockResponse_SERVICE_ERROR ConsensusIgnoreBlockResponse_Status = 3
	ConsensusIgnoreBlockResponse_NOT_READY     ConsensusIgnoreBlockResponse_Status = 4
	ConsensusIgnoreBlockResponse_UNKNOWN_BLOCK ConsensusIgnoreBlockResponse_Status = 5
)

// Enum value maps for ConsensusIgnoreBlockResponse_Status.
var (
	ConsensusIgnoreBlockResponse_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "OK",
		2: "BAD_REQUEST",
		3: "SERVICE_ERROR",
		4: "NOT_READY",
		5: "UNKNOWN_BLOCK",
	}
	ConsensusIgnoreBlockResponse_Status_value = map[string]int32{
		"STATUS_UNSET":  0,
		"OK":            1,
		"BAD_REQUEST":   2,
		"SERVICE_ERROR": 3,
		"NOT_READY":     4,
		"UNKNOWN_BLOCK": 5,
	}
)

func (x ConsensusIgnoreBlockResponse_Status) Enum() *ConsensusIgnoreBlockResponse_Status {
	p := new(ConsensusIgnoreBlockResponse_Status)
	*p = x
	return p
}

func (x ConsensusIgnoreBlockResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsensusIgnoreBlockResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_consensus_pb2_consensus_proto_enumTypes[9].Descriptor()
}

func (ConsensusIgnoreBlockResponse_Status) Type() protoreflect.EnumType {
	return &file_protobuf_consensus_pb2_consensus_proto_enumTypes[9]
}

func (x ConsensusIgnoreBlockResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsensusIgnoreBlockResponse_Status.Descriptor instead.
func (ConsensusIgnoreBlockResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{32, 0}
}

type ConsensusFailBlockResponse_Status int32

const (
	ConsensusFailBlockResponse_STATUS_UNSET  ConsensusFailBlockResponse_Status = 0
	ConsensusFailBlockResponse_OK            ConsensusFailBlockResponse_Status = 1
	ConsensusFailBlockResponse_BAD_REQUEST   ConsensusFailBlockResponse_Status = 2
	ConsensusFailBlockResponse_SERVICE_ERROR ConsensusFailBlockResponse_Status = 3
	ConsensusFailBlockResponse_NOT_READY     ConsensusFailBlockResponse_Status = 4
	ConsensusFailBlockResponse_UNKNOWN_BLOCK ConsensusFailBlockResponse_Status = 5
)

// Enum value maps for ConsensusFailBlockResponse_Status.
var (
	ConsensusFailBlockResponse_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "OK",
		2: "BAD_REQUEST",
		3: "SERVICE_ERROR",
		4: "NOT_READY",
		5: "UNKNOWN_BLOCK",
	}
	ConsensusFailBlockResponse_Status_value = map[string]int32{
		"STATUS_UNSET":  0,
		"OK":            1,
		"BAD_REQUEST":   2,
		"SERVICE_ERROR": 3,
		"NOT_READY":     4,
		"UNKNOWN_BLOCK": 5,
	}
)

func (x ConsensusFailBlockResponse_Status) Enum() *ConsensusFailBlockResponse_Status {
	p := new(ConsensusFailBlockResponse_Status)
	*p = x
	return p
}

func (x ConsensusFailBlockResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsensusFailBlockResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_consensus_pb2_consensus_proto_enumTypes[10].Descriptor()
}

func (ConsensusFailBlockResponse_Status) Type() protoreflect.EnumType {
	return &file_protobuf_consensus_pb2_consensus_proto_enumTypes[10]
}

func (x ConsensusFailBlockResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsensusFailBlockResponse_Status.Descriptor instead.
func (ConsensusFailBlockResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{34, 0}
}

type ConsensusBlocksGetResponse_Status int32

const (
	ConsensusBlocksGetResponse_STATUS_UNSET  ConsensusBlocksGetResponse_Status = 0
	ConsensusBlocksGetResponse_OK            ConsensusBlocksGetResponse_Status = 1
	ConsensusBlocksGetResponse_BAD_REQUEST   ConsensusBlocksGetResponse_Status = 2
	ConsensusBlocksGetResponse_SERVICE_ERROR ConsensusBlocksGetResponse_Status = 3
	ConsensusBlocksGetResponse_NOT_READY     ConsensusBlocksGetResponse_Status = 4
	ConsensusBlocksGetResponse_UNKNOWN_BLOCK ConsensusBlocksGetResponse_Status = 5
)

// Enum value maps for ConsensusBlocksGetResponse_Status.
var (
	ConsensusBlocksGetResponse_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "OK",
		2: "BAD_REQUEST",
		3: "SERVICE_ERROR",
		4: "NOT_READY",
		5: "UNKNOWN_BLOCK",
	}
	ConsensusBlocksGetResponse_Status_value = map[string]int32{
		"STATUS_UNSET":  0,
		"OK":            1,
		"BAD_REQUEST":   2,
		"SERVICE_ERROR": 3,
		"NOT_READY":     4,
		"UNKNOWN_BLOCK": 5,
	}
)

func (x ConsensusBlocksGetResponse_Status) Enum() *ConsensusBlocksGetResponse_Status {
	p := new(ConsensusBlocksGetResponse_Status)
	*p = x
	return p
}

func (x ConsensusBlocksGetResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsensusBlocksGetResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_consensus_pb2_consensus_proto_enumTypes[11].Descriptor()
}

func (ConsensusBlocksGetResponse_Status) Type() protoreflect.EnumType {
	return &file_protobuf_consensus_pb2_consensus_proto_enumTypes[11]
}

func (x ConsensusBlocksGetResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsensusBlocksGetResponse_Status.Descriptor instead.
func (ConsensusBlocksGetResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{36, 0}
}

type ConsensusChainHeadGetResponse_Status int32

const (
	ConsensusChainHeadGetResponse_STATUS_UNSET  ConsensusChainHeadGetResponse_Status = 0
	ConsensusChainHeadGetResponse_OK            ConsensusChainHeadGetResponse_Status = 1
	ConsensusChainHeadGetResponse_BAD_REQUEST   ConsensusChainHeadGetResponse_Status = 2
	ConsensusChainHeadGetResponse_SERVICE_ERROR ConsensusChainHeadGetResponse_Status = 3
	ConsensusChainHeadGetResponse_NOT_READY     ConsensusChainHeadGetResponse_Status = 4
	ConsensusChainHeadGetResponse_NO_CHAIN_HEAD ConsensusChainHeadGetResponse_Status = 5
)

// Enum value maps for ConsensusChainHeadGetResponse_Status.
var (
	ConsensusChainHeadGetResponse_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "OK",
		2: "BAD_REQUEST",
		3: "SERVICE_ERROR",
		4: "NOT_READY",
		5: "NO_CHAIN_HEAD",
	}
	ConsensusChainHeadGetResponse_Status_value = map[string]int32{
		"STATUS_UNSET":  0,
		"OK":            1,
		"BAD_REQUEST":   2,
		"SERVICE_ERROR": 3,
		"NOT_READY":     4,
		"NO_CHAIN_HEAD": 5,
	}
)

func (x ConsensusChainHeadGetResponse_Status) Enum() *ConsensusChainHeadGetResponse_Status {
	p := new(ConsensusChainHeadGetResponse_Status)
	*p = x
	return p
}

func (x ConsensusChainHeadGetResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsensusChainHeadGetResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_consensus_pb2_consensus_proto_enumTypes[12].Descriptor()
}

func (ConsensusChainHeadGetResponse_Status) Type() protoreflect.EnumType {
	return &file_protobuf_consensus_pb2_consensus_proto_enumTypes[12]
}

func (x ConsensusChainHeadGetResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsensusChainHeadGetResponse_Status.Descriptor instead.
func (ConsensusChainHeadGetResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{38, 0}
}

type ConsensusSettingsGetResponse_Status int32

const (
	ConsensusSettingsGetResponse_STATUS_UNSET  ConsensusSettingsGetResponse_Status = 0
	ConsensusSettingsGetResponse_OK            ConsensusSettingsGetResponse_Status = 1
	ConsensusSettingsGetResponse_BAD_REQUEST   ConsensusSettingsGetResponse_Status = 2
	ConsensusSettingsGetResponse_SERVICE_ERROR ConsensusSettingsGetResponse_Status = 3
	ConsensusSettingsGetResponse_NOT_READY     ConsensusSettingsGetResponse_Status = 4
	ConsensusSettingsGetResponse_UNKNOWN_BLOCK ConsensusSettingsGetResponse_Status = 5
)

// Enum value maps for ConsensusSettingsGetResponse_Status.
var (
	ConsensusSettingsGetResponse_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "OK",
		2: "BAD_REQUEST",
		3: "SERVICE_ERROR",
		4: "NOT_READY",
		5: "UNKNOWN_BLOCK",
	}
	ConsensusSettingsGetResponse_Status_value = map[string]int32{
		"STATUS_UNSET":  0,
		"OK":            1,
		"BAD_REQUEST":   2,
		"SERVICE_ERROR": 3,
		"NOT_READY":     4,
		"UNKNOWN_BLOCK": 5,
	}
)

func (x ConsensusSettingsGetResponse_Status) Enum() *ConsensusSettingsGetResponse_Status {
	p := new(ConsensusSettingsGetResponse_Status)
	*p = x
	return p
}

func (x ConsensusSettingsGetResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsensusSettingsGetResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_consensus_pb2_consensus_proto_enumTypes[13].Descriptor()
}

func (ConsensusSettingsGetResponse_Status) Type() protoreflect.EnumType {
	return &file_protobuf_consensus_pb2_consensus_proto_enumTypes[13]
}

func (x ConsensusSettingsGetResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsensusSettingsGetResponse_Status.Descriptor instead.
func (ConsensusSettingsGetResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{40, 0}
}

type ConsensusStateGetResponse_Status int32

const (
	ConsensusStateGetResponse_STATUS_UNSET  ConsensusStateGetResponse_Status = 0
	ConsensusStateGetResponse_OK            ConsensusStateGetResponse_Status = 1
	ConsensusStateGetResponse_BAD_REQUEST   ConsensusStateGetResponse_Status = 2
	ConsensusStateGetResponse_SERVICE_ERROR ConsensusStateGetResponse_Status = 3
	ConsensusStateGetResponse_NOT_READY     ConsensusStateGetResponse_Status = 4
	ConsensusStateGetResponse_UNKNOWN_BLOCK ConsensusStateGetResponse_Status = 5
)

// Enum value maps for ConsensusStateGetResponse_Status.
var (
	ConsensusStateGetResponse_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "OK",
		2: "BAD_REQUEST",
		3: "SERVICE_ERROR",
		4: "NOT_READY",
		5: "UNKNOWN_BLOCK",
	}
	ConsensusStateGetResponse_Status_value = map[string]int32{
		"STATUS_UNSET":  0,
		"OK":            1,
		"BAD_REQUEST":   2,
		"SERVICE_ERROR": 3,
		"NOT_READY":     4,
		"UNKNOWN_BLOCK": 5,
	}
)

func (x ConsensusStateGetResponse_Status) Enum() *ConsensusStateGetResponse_Status {
	p := new(ConsensusStateGetResponse_Status)
	*p = x
	return p
}

func (x ConsensusStateGetResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsensusStateGetResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_consensus_pb2_consensus_proto_enumTypes[14].Descriptor()
}

func (ConsensusStateGetResponse_Status) Type() protoreflect.EnumType {
	return &file_protobuf_consensus_pb2_consensus_proto_enumTypes[14]
}

func (x ConsensusStateGetResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsensusStateGetResponse_Status.Descriptor instead.
func (ConsensusStateGetResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{42, 0}
}

// A consensus-related message sent between peers
type ConsensusPeerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interpretation is left to the consensus engine implementation
	MessageType string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// The opaque payload to send to other nodes
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// Used to identify the consensus engine that produced this message
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ConsensusPeerMessage) Reset() {
	*x = ConsensusPeerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusPeerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusPeerMessage) ProtoMessage() {}

func (x *ConsensusPeerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusPeerMessage.ProtoReflect.Descriptor instead.
func (*ConsensusPeerMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{0}
}

func (x *ConsensusPeerMessage) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *ConsensusPeerMessage) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ConsensusPeerMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConsensusPeerMessage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// All information about a block that is relevant to consensus
type ConsensusBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId    []byte `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	PreviousId []byte `protobuf:"bytes,2,opt,name=previous_id,json=previousId,proto3" json:"previous_id,omitempty"`
	// The id of peer that signed this block
	SignerId []byte `protobuf:"bytes,3,opt,name=signer_id,json=signerId,proto3" json:"signer_id,omitempty"`
	BlockNum uint64 `protobuf:"varint,4,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	Payload  []byte `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	// A summary of the contents of the block
	Summary []byte `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *ConsensusBlock) Reset() {
	*x = ConsensusBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusBlock) ProtoMessage() {}

func (x *ConsensusBlock) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusBlock.ProtoReflect.Descriptor instead.
func (*ConsensusBlock) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{1}
}

func (x *ConsensusBlock) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *ConsensusBlock) GetPreviousId() []byte {
	if x != nil {
		return x.PreviousId
	}
	return nil
}

func (x *ConsensusBlock) GetSignerId() []byte {
	if x != nil {
		return x.SignerId
	}
	return nil
}

func (x *ConsensusBlock) GetBlockNum() uint64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *ConsensusBlock) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ConsensusBlock) GetSummary() []byte {
	if x != nil {
		return x.Summary
	}
	return nil
}

// Information about a peer that is relevant to consensus
type ConsensusPeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique id for this peer. This can be correlated with the signer id
	// on consensus blocks.
	PeerId []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *ConsensusPeerInfo) Reset() {
	*x = ConsensusPeerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusPeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusPeerInfo) ProtoMessage() {}

func (x *ConsensusPeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusPeerInfo.ProtoReflect.Descriptor instead.
func (*ConsensusPeerInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{2}
}

func (x *ConsensusPeerInfo) GetPeerId() []byte {
	if x != nil {
		return x.PeerId
	}
	return nil
}

// A settings key-value pair
type ConsensusSettingsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConsensusSettingsEntry) Reset() {
	*x = ConsensusSettingsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusSettingsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusSettingsEntry) ProtoMessage() {}

func (x *ConsensusSettingsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusSettingsEntry.ProtoReflect.Descriptor instead.
func (*ConsensusSettingsEntry) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{3}
}

func (x *ConsensusSettingsEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ConsensusSettingsEntry) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// A state key-value pair
type ConsensusStateEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ConsensusStateEntry) Reset() {
	*x = ConsensusStateEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusStateEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusStateEntry) ProtoMessage() {}

func (x *ConsensusStateEntry) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusStateEntry.ProtoReflect.Descriptor instead.
func (*ConsensusStateEntry) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{4}
}

func (x *ConsensusStateEntry) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ConsensusStateEntry) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Sent to connect with the validator
type ConsensusRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this consensus engine
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The version of this consensus engine
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ConsensusRegisterRequest) Reset() {
	*x = ConsensusRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusRegisterRequest) ProtoMessage() {}

func (x *ConsensusRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusRegisterRequest.ProtoReflect.Descriptor instead.
func (*ConsensusRegisterRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{5}
}

func (x *ConsensusRegisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConsensusRegisterRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ConsensusRegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConsensusRegisterResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ConsensusRegisterResponse_Status" json:"status,omitempty"`
	// Startup Info
	ChainHead     *ConsensusBlock      `protobuf:"bytes,2,opt,name=chain_head,json=chainHead,proto3" json:"chain_head,omitempty"`
	Peers         []*ConsensusPeerInfo `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`
	LocalPeerInfo *ConsensusPeerInfo   `protobuf:"bytes,4,opt,name=local_peer_info,json=localPeerInfo,proto3" json:"local_peer_info,omitempty"`
}

func (x *ConsensusRegisterResponse) Reset() {
	*x = ConsensusRegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusRegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusRegisterResponse) ProtoMessage() {}

func (x *ConsensusRegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusRegisterResponse.ProtoReflect.Descriptor instead.
func (*ConsensusRegisterResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{6}
}

func (x *ConsensusRegisterResponse) GetStatus() ConsensusRegisterResponse_Status {
	if x != nil {
		return x.Status
	}
	return ConsensusRegisterResponse_STATUS_UNSET
}

func (x *ConsensusRegisterResponse) GetChainHead() *ConsensusBlock {
	if x != nil {
		return x.ChainHead
	}
	return nil
}

func (x *ConsensusRegisterResponse) GetPeers() []*ConsensusPeerInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *ConsensusRegisterResponse) GetLocalPeerInfo() *ConsensusPeerInfo {
	if x != nil {
		return x.LocalPeerInfo
	}
	return nil
}

// A new peer was added
type ConsensusNotifyPeerConnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerInfo *ConsensusPeerInfo `protobuf:"bytes,1,opt,name=peer_info,json=peerInfo,proto3" json:"peer_info,omitempty"`
}

func (x *ConsensusNotifyPeerConnected) Reset() {
	*x = ConsensusNotifyPeerConnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusNotifyPeerConnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusNotifyPeerConnected) ProtoMessage() {}

func (x *ConsensusNotifyPeerConnected) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusNotifyPeerConnected.ProtoReflect.Descriptor instead.
func (*ConsensusNotifyPeerConnected) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{7}
}

func (x *ConsensusNotifyPeerConnected) GetPeerInfo() *ConsensusPeerInfo {
	if x != nil {
		return x.PeerInfo
	}
	return nil
}

// An existing peer was dropped
type ConsensusNotifyPeerDisconnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *ConsensusNotifyPeerDisconnected) Reset() {
	*x = ConsensusNotifyPeerDisconnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusNotifyPeerDisconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusNotifyPeerDisconnected) ProtoMessage() {}

func (x *ConsensusNotifyPeerDisconnected) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusNotifyPeerDisconnected.ProtoReflect.Descriptor instead.
func (*ConsensusNotifyPeerDisconnected) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{8}
}

func (x *ConsensusNotifyPeerDisconnected) GetPeerId() []byte {
	if x != nil {
		return x.PeerId
	}
	return nil
}

// A new message was received from a peer
type ConsensusNotifyPeerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  *ConsensusPeerMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	SenderId []byte                `protobuf:"bytes,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
}

func (x *ConsensusNotifyPeerMessage) Reset() {
	*x = ConsensusNotifyPeerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusNotifyPeerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusNotifyPeerMessage) ProtoMessage() {}

func (x *ConsensusNotifyPeerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusNotifyPeerMessage.ProtoReflect.Descriptor instead.
func (*ConsensusNotifyPeerMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{9}
}

func (x *ConsensusNotifyPeerMessage) GetMessage() *ConsensusPeerMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ConsensusNotifyPeerMessage) GetSenderId() []byte {
	if x != nil {
		return x.SenderId
	}
	return nil
}

// A new block was received and passed initial consensus validation
type ConsensusNotifyBlockNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *ConsensusBlock `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *ConsensusNotifyBlockNew) Reset() {
	*x = ConsensusNotifyBlockNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusNotifyBlockNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusNotifyBlockNew) ProtoMessage() {}

func (x *ConsensusNotifyBlockNew) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusNotifyBlockNew.ProtoReflect.Descriptor instead.
func (*ConsensusNotifyBlockNew) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{10}
}

func (x *ConsensusNotifyBlockNew) GetBlock() *ConsensusBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

// This block can be committed successfully
type ConsensusNotifyBlockValid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId []byte `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
}

func (x *ConsensusNotifyBlockValid) Reset() {
	*x = ConsensusNotifyBlockValid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusNotifyBlockValid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusNotifyBlockValid) ProtoMessage() {}

func (x *ConsensusNotifyBlockValid) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusNotifyBlockValid.ProtoReflect.Descriptor instead.
func (*ConsensusNotifyBlockValid) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{11}
}

func (x *ConsensusNotifyBlockValid) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

// This block cannot be committed successfully
type ConsensusNotifyBlockInvalid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId []byte `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
}

func (x *ConsensusNotifyBlockInvalid) Reset() {
	*x = ConsensusNotifyBlockInvalid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusNotifyBlockInvalid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusNotifyBlockInvalid) ProtoMessage() {}

func (x *ConsensusNotifyBlockInvalid) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusNotifyBlockInvalid.ProtoReflect.Descriptor instead.
func (*ConsensusNotifyBlockInvalid) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{12}
}

func (x *ConsensusNotifyBlockInvalid) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

// This block has been committed
type ConsensusNotifyBlockCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId []byte `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
}

func (x *ConsensusNotifyBlockCommit) Reset() {
	*x = ConsensusNotifyBlockCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusNotifyBlockCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusNotifyBlockCommit) ProtoMessage() {}

func (x *ConsensusNotifyBlockCommit) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusNotifyBlockCommit.ProtoReflect.Descriptor instead.
func (*ConsensusNotifyBlockCommit) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{13}
}

func (x *ConsensusNotifyBlockCommit) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

// Confirm that the notification was received. The validator message
// correlation id is used to determine which notification this is an ack for.
type ConsensusNotifyAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConsensusNotifyAck) Reset() {
	*x = ConsensusNotifyAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusNotifyAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusNotifyAck) ProtoMessage() {}

func (x *ConsensusNotifyAck) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusNotifyAck.ProtoReflect.Descriptor instead.
func (*ConsensusNotifyAck) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{14}
}

// Send a consensus message to a specific, connected peer
type ConsensusSendToRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *ConsensusPeerMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	PeerId  []byte                `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *ConsensusSendToRequest) Reset() {
	*x = ConsensusSendToRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusSendToRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusSendToRequest) ProtoMessage() {}

func (x *ConsensusSendToRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusSendToRequest.ProtoReflect.Descriptor instead.
func (*ConsensusSendToRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{15}
}

func (x *ConsensusSendToRequest) GetMessage() *ConsensusPeerMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ConsensusSendToRequest) GetPeerId() []byte {
	if x != nil {
		return x.PeerId
	}
	return nil
}

type ConsensusSendToResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConsensusSendToResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ConsensusSendToResponse_Status" json:"status,omitempty"`
}

func (x *ConsensusSendToResponse) Reset() {
	*x = ConsensusSendToResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusSendToResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusSendToResponse) ProtoMessage() {}

func (x *ConsensusSendToResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusSendToResponse.ProtoReflect.Descriptor instead.
func (*ConsensusSendToResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{16}
}

func (x *ConsensusSendToResponse) GetStatus() ConsensusSendToResponse_Status {
	if x != nil {
		return x.Status
	}
	return ConsensusSendToResponse_STATUS_UNSET
}

// Broadcast a consensus message to all peers
type ConsensusBroadcastRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *ConsensusPeerMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ConsensusBroadcastRequest) Reset() {
	*x = ConsensusBroadcastRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusBroadcastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusBroadcastRequest) ProtoMessage() {}

func (x *ConsensusBroadcastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusBroadcastRequest.ProtoReflect.Descriptor instead.
func (*ConsensusBroadcastRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{17}
}

func (x *ConsensusBroadcastRequest) GetMessage() *ConsensusPeerMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type ConsensusBroadcastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConsensusBroadcastResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ConsensusBroadcastResponse_Status" json:"status,omitempty"`
}

func (x *ConsensusBroadcastResponse) Reset() {
	*x = ConsensusBroadcastResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusBroadcastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusBroadcastResponse) ProtoMessage() {}

func (x *ConsensusBroadcastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusBroadcastResponse.ProtoReflect.Descriptor instead.
func (*ConsensusBroadcastResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{18}
}

func (x *ConsensusBroadcastResponse) GetStatus() ConsensusBroadcastResponse_Status {
	if x != nil {
		return x.Status
	}
	return ConsensusBroadcastResponse_STATUS_UNSET
}

// Initialize a new block built on the block with the given previous id and
// begin adding batches to it. If no previous id is specified, the current
// head will be used.
type ConsensusInitializeBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousId []byte `protobuf:"bytes,1,opt,name=previous_id,json=previousId,proto3" json:"previous_id,omitempty"`
}

func (x *ConsensusInitializeBlockRequest) Reset() {
	*x = ConsensusInitializeBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusInitializeBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusInitializeBlockRequest) ProtoMessage() {}

func (x *ConsensusInitializeBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusInitializeBlockRequest.ProtoReflect.Descriptor instead.
func (*ConsensusInitializeBlockRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{19}
}

func (x *ConsensusInitializeBlockRequest) GetPreviousId() []byte {
	if x != nil {
		return x.PreviousId
	}
	return nil
}

type ConsensusInitializeBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConsensusInitializeBlockResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ConsensusInitializeBlockResponse_Status" json:"status,omitempty"`
}

func (x *ConsensusInitializeBlockResponse) Reset() {
	*x = ConsensusInitializeBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusInitializeBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusInitializeBlockResponse) ProtoMessage() {}

func (x *ConsensusInitializeBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusInitializeBlockResponse.ProtoReflect.Descriptor instead.
func (*ConsensusInitializeBlockResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{20}
}

func (x *ConsensusInitializeBlockResponse) GetStatus() ConsensusInitializeBlockResponse_Status {
	if x != nil {
		return x.Status
	}
	return ConsensusInitializeBlockResponse_STATUS_UNSET
}

// Stop adding batches to the current block and return a summary of its
// contents.
type ConsensusSummarizeBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConsensusSummarizeBlockRequest) Reset() {
	*x = ConsensusSummarizeBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusSummarizeBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusSummarizeBlockRequest) ProtoMessage() {}

func (x *ConsensusSummarizeBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusSummarizeBlockRequest.ProtoReflect.Descriptor instead.
func (*ConsensusSummarizeBlockRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{21}
}

type ConsensusSummarizeBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConsensusSummarizeBlockResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ConsensusSummarizeBlockResponse_Status" json:"status,omitempty"`
	// A summary of the block contents
	Summary []byte `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *ConsensusSummarizeBlockResponse) Reset() {
	*x = ConsensusSummarizeBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusSummarizeBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusSummarizeBlockResponse) ProtoMessage() {}

func (x *ConsensusSummarizeBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusSummarizeBlockResponse.ProtoReflect.Descriptor instead.
func (*ConsensusSummarizeBlockResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{22}
}

func (x *ConsensusSummarizeBlockResponse) GetStatus() ConsensusSummarizeBlockResponse_Status {
	if x != nil {
		return x.Status
	}
	return ConsensusSummarizeBlockResponse_STATUS_UNSET
}

func (x *ConsensusSummarizeBlockResponse) GetSummary() []byte {
	if x != nil {
		return x.Summary
	}
	return nil
}

// Insert the given consensus data into the block and sign it. If this call is
// successful, the consensus engine will receive the block afterwards.
type ConsensusFinalizeBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The consensus data to include in the finalized block
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ConsensusFinalizeBlockRequest) Reset() {
	*x = ConsensusFinalizeBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusFinalizeBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusFinalizeBlockRequest) ProtoMessage() {}

func (x *ConsensusFinalizeBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusFinalizeBlockRequest.ProtoReflect.Descriptor instead.
func (*ConsensusFinalizeBlockRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{23}
}

func (x *ConsensusFinalizeBlockRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConsensusFinalizeBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConsensusFinalizeBlockResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ConsensusFinalizeBlockResponse_Status" json:"status,omitempty"`
	// The block id of the newly created block
	BlockId []byte `protobuf:"bytes,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
}

func (x *ConsensusFinalizeBlockResponse) Reset() {
	*x = ConsensusFinalizeBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusFinalizeBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusFinalizeBlockResponse) ProtoMessage() {}

func (x *ConsensusFinalizeBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusFinalizeBlockResponse.ProtoReflect.Descriptor instead.
func (*ConsensusFinalizeBlockResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{24}
}

func (x *ConsensusFinalizeBlockResponse) GetStatus() ConsensusFinalizeBlockResponse_Status {
	if x != nil {
		return x.Status
	}
	return ConsensusFinalizeBlockResponse_STATUS_UNSET
}

func (x *ConsensusFinalizeBlockResponse) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

// Stop adding batches to the current block and abandon it.
type ConsensusCancelBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConsensusCancelBlockRequest) Reset() {
	*x = ConsensusCancelBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusCancelBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusCancelBlockRequest) ProtoMessage() {}

func (x *ConsensusCancelBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusCancelBlockRequest.ProtoReflect.Descriptor instead.
func (*ConsensusCancelBlockRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{25}
}

type ConsensusCancelBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConsensusCancelBlockResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ConsensusCancelBlockResponse_Status" json:"status,omitempty"`
}

func (x *ConsensusCancelBlockResponse) Reset() {
	*x = ConsensusCancelBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusCancelBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusCancelBlockResponse) ProtoMessage() {}

func (x *ConsensusCancelBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusCancelBlockResponse.ProtoReflect.Descriptor instead.
func (*ConsensusCancelBlockResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{26}
}

func (x *ConsensusCancelBlockResponse) GetStatus() ConsensusCancelBlockResponse_Status {
	if x != nil {
		return x.Status
	}
	return ConsensusCancelBlockResponse_STATUS_UNSET
}

// Request that, for each block block in order, the block is checked to
// determine whether the block can be committed successfully or not. Blocks
// may be checked in parallel. If a new request arrives, it overrides the
// previous request allowing the engine to reprioritize the list of blocks to
// check.
//
// NOTE: OK does not mean the blocks will all commit successfully, only that
// the directive was received successfully. The engine must listen for
// notifications from the consuming component to learn if the blocks would
// commit or not.
type ConsensusCheckBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockIds [][]byte `protobuf:"bytes,1,rep,name=block_ids,json=blockIds,proto3" json:"block_ids,omitempty"`
}

func (x *ConsensusCheckBlocksRequest) Reset() {
	*x = ConsensusCheckBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusCheckBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusCheckBlocksRequest) ProtoMessage() {}

func (x *ConsensusCheckBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusCheckBlocksRequest.ProtoReflect.Descriptor instead.
func (*ConsensusCheckBlocksRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{27}
}

func (x *ConsensusCheckBlocksRequest) GetBlockIds() [][]byte {
	if x != nil {
		return x.BlockIds
	}
	return nil
}

type ConsensusCheckBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConsensusCheckBlocksResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ConsensusCheckBlocksResponse_Status" json:"status,omitempty"`
}

func (x *ConsensusCheckBlocksResponse) Reset() {
	*x = ConsensusCheckBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusCheckBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusCheckBlocksResponse) ProtoMessage() {}

func (x *ConsensusCheckBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusCheckBlocksResponse.ProtoReflect.Descriptor instead.
func (*ConsensusCheckBlocksResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{28}
}

func (x *ConsensusCheckBlocksResponse) GetStatus() ConsensusCheckBlocksResponse_Status {
	if x != nil {
		return x.Status
	}
	return ConsensusCheckBlocksResponse_STATUS_UNSET
}

// Request that the block be committed. This request fails if the block has
// not already been checked.
//
// NOTE: OK does not mean the block has been committed, only that the directive
// was received successfully. The engine must listen for notifications from the
// consuming component to learn when the block commits.
type ConsensusCommitBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId []byte `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
}

func (x *ConsensusCommitBlockRequest) Reset() {
	*x = ConsensusCommitBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusCommitBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusCommitBlockRequest) ProtoMessage() {}

func (x *ConsensusCommitBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusCommitBlockRequest.ProtoReflect.Descriptor instead.
func (*ConsensusCommitBlockRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{29}
}

func (x *ConsensusCommitBlockRequest) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

type ConsensusCommitBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConsensusCommitBlockResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ConsensusCommitBlockResponse_Status" json:"status,omitempty"`
}

func (x *ConsensusCommitBlockResponse) Reset() {
	*x = ConsensusCommitBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusCommitBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusCommitBlockResponse) ProtoMessage() {}

func (x *ConsensusCommitBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusCommitBlockResponse.ProtoReflect.Descriptor instead.
func (*ConsensusCommitBlockResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{30}
}

func (x *ConsensusCommitBlockResponse) GetStatus() ConsensusCommitBlockResponse_Status {
	if x != nil {
		return x.Status
	}
	return ConsensusCommitBlockResponse_STATUS_UNSET
}

// Inform the consuming component that this block is no longer being considered
// and can be held or freed as needed.
type ConsensusIgnoreBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId []byte `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
}

func (x *ConsensusIgnoreBlockRequest) Reset() {
	*x = ConsensusIgnoreBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusIgnoreBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusIgnoreBlockRequest) ProtoMessage() {}

func (x *ConsensusIgnoreBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusIgnoreBlockRequest.ProtoReflect.Descriptor instead.
func (*ConsensusIgnoreBlockRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{31}
}

func (x *ConsensusIgnoreBlockRequest) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

type ConsensusIgnoreBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConsensusIgnoreBlockResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ConsensusIgnoreBlockResponse_Status" json:"status,omitempty"`
}

func (x *ConsensusIgnoreBlockResponse) Reset() {
	*x = ConsensusIgnoreBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusIgnoreBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusIgnoreBlockResponse) ProtoMessage() {}

func (x *ConsensusIgnoreBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusIgnoreBlockResponse.ProtoReflect.Descriptor instead.
func (*ConsensusIgnoreBlockResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{32}
}

func (x *ConsensusIgnoreBlockResponse) GetStatus() ConsensusIgnoreBlockResponse_Status {
	if x != nil {
		return x.Status
	}
	return ConsensusIgnoreBlockResponse_STATUS_UNSET
}

// Fail this block and any of its descendants and purge them as needed.
type ConsensusFailBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId []byte `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
}

func (x *ConsensusFailBlockRequest) Reset() {
	*x = ConsensusFailBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusFailBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusFailBlockRequest) ProtoMessage() {}

func (x *ConsensusFailBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusFailBlockRequest.ProtoReflect.Descriptor instead.
func (*ConsensusFailBlockRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{33}
}

func (x *ConsensusFailBlockRequest) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

type ConsensusFailBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConsensusFailBlockResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ConsensusFailBlockResponse_Status" json:"status,omitempty"`
}

func (x *ConsensusFailBlockResponse) Reset() {
	*x = ConsensusFailBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusFailBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusFailBlockResponse) ProtoMessage() {}

func (x *ConsensusFailBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusFailBlockResponse.ProtoReflect.Descriptor instead.
func (*ConsensusFailBlockResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{34}
}

func (x *ConsensusFailBlockResponse) GetStatus() ConsensusFailBlockResponse_Status {
	if x != nil {
		return x.Status
	}
	return ConsensusFailBlockResponse_STATUS_UNSET
}

// Retrieve consensus-related information about blocks. If some blocks could
// not be found, only the blocks that could be found will be returned.
type ConsensusBlocksGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockIds [][]byte `protobuf:"bytes,1,rep,name=block_ids,json=blockIds,proto3" json:"block_ids,omitempty"`
}

func (x *ConsensusBlocksGetRequest) Reset() {
	*x = ConsensusBlocksGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusBlocksGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusBlocksGetRequest) ProtoMessage() {}

func (x *ConsensusBlocksGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusBlocksGetRequest.ProtoReflect.Descriptor instead.
func (*ConsensusBlocksGetRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{35}
}

func (x *ConsensusBlocksGetRequest) GetBlockIds() [][]byte {
	if x != nil {
		return x.BlockIds
	}
	return nil
}

type ConsensusBlocksGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConsensusBlocksGetResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ConsensusBlocksGetResponse_Status" json:"status,omitempty"`
	Blocks []*ConsensusBlock                 `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *ConsensusBlocksGetResponse) Reset() {
	*x = ConsensusBlocksGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusBlocksGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusBlocksGetResponse) ProtoMessage() {}

func (x *ConsensusBlocksGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusBlocksGetResponse.ProtoReflect.Descriptor instead.
func (*ConsensusBlocksGetResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{36}
}

func (x *ConsensusBlocksGetResponse) GetStatus() ConsensusBlocksGetResponse_Status {
	if x != nil {
		return x.Status
	}
	return ConsensusBlocksGetResponse_STATUS_UNSET
}

func (x *ConsensusBlocksGetResponse) GetBlocks() []*ConsensusBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// Retrieve consensus-related information about the chain head.
type ConsensusChainHeadGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConsensusChainHeadGetRequest) Reset() {
	*x = ConsensusChainHeadGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusChainHeadGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusChainHeadGetRequest) ProtoMessage() {}

func (x *ConsensusChainHeadGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusChainHeadGetRequest.ProtoReflect.Descriptor instead.
func (*ConsensusChainHeadGetRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{37}
}

type ConsensusChainHeadGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConsensusChainHeadGetResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ConsensusChainHeadGetResponse_Status" json:"status,omitempty"`
	Block  *ConsensusBlock                      `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *ConsensusChainHeadGetResponse) Reset() {
	*x = ConsensusChainHeadGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusChainHeadGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusChainHeadGetResponse) ProtoMessage() {}

func (x *ConsensusChainHeadGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusChainHeadGetResponse.ProtoReflect.Descriptor instead.
func (*ConsensusChainHeadGetResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{38}
}

func (x *ConsensusChainHeadGetResponse) GetStatus() ConsensusChainHeadGetResponse_Status {
	if x != nil {
		return x.Status
	}
	return ConsensusChainHeadGetResponse_STATUS_UNSET
}

func (x *ConsensusChainHeadGetResponse) GetBlock() *ConsensusBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

// Read the values of these settings from state as of the given block. If some
// values settings keys cannot be found, the keys that were found will be
// returned.
type ConsensusSettingsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId []byte   `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Keys    []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *ConsensusSettingsGetRequest) Reset() {
	*x = ConsensusSettingsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusSettingsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusSettingsGetRequest) ProtoMessage() {}

func (x *ConsensusSettingsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusSettingsGetRequest.ProtoReflect.Descriptor instead.
func (*ConsensusSettingsGetRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{39}
}

func (x *ConsensusSettingsGetRequest) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *ConsensusSettingsGetRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type ConsensusSettingsGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  ConsensusSettingsGetResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ConsensusSettingsGetResponse_Status" json:"status,omitempty"`
	Entries []*ConsensusSettingsEntry           `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ConsensusSettingsGetResponse) Reset() {
	*x = ConsensusSettingsGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusSettingsGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusSettingsGetResponse) ProtoMessage() {}

func (x *ConsensusSettingsGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusSettingsGetResponse.ProtoReflect.Descriptor instead.
func (*ConsensusSettingsGetResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{40}
}

func (x *ConsensusSettingsGetResponse) GetStatus() ConsensusSettingsGetResponse_Status {
	if x != nil {
		return x.Status
	}
	return ConsensusSettingsGetResponse_STATUS_UNSET
}

func (x *ConsensusSettingsGetResponse) GetEntries() []*ConsensusSettingsEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Read the data at these addresses from state as of the given block. If some
// addresses cannot be found, state at the addresses that were found will be
// returned.
type ConsensusStateGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId   []byte   `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Addresses []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *ConsensusStateGetRequest) Reset() {
	*x = ConsensusStateGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusStateGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusStateGetRequest) ProtoMessage() {}

func (x *ConsensusStateGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusStateGetRequest.ProtoReflect.Descriptor instead.
func (*ConsensusStateGetRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{41}
}

func (x *ConsensusStateGetRequest) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *ConsensusStateGetRequest) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type ConsensusStateGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  ConsensusStateGetResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ConsensusStateGetResponse_Status" json:"status,omitempty"`
	Entries []*ConsensusStateEntry           `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ConsensusStateGetResponse) Reset() {
	*x = ConsensusStateGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusStateGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusStateGetResponse) ProtoMessage() {}

func (x *ConsensusStateGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_consensus_pb2_consensus_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusStateGetResponse.ProtoReflect.Descriptor instead.
func (*ConsensusStateGetResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP(), []int{42}
}

func (x *ConsensusStateGetResponse) GetStatus() ConsensusStateGetResponse_Status {
	if x != nil {
		return x.Status
	}
	return ConsensusStateGetResponse_STATUS_UNSET
}

func (x *ConsensusStateGetResponse) GetEntries() []*ConsensusStateEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

var File_protobuf_consensus_pb2_consensus_proto protoreflect.FileDescriptor

var file_protobuf_consensus_pb2_consensus_proto_rawDesc = []byte{
	0x0a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x5f, 0x70, 0x62, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xba, 0x01, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x48,
	0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc3, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42,
	0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x22, 0x4f,
	0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2f,
	0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x3a, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x50, 0x65, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x1a, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x65,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x65, 0x77, 0x12, 0x25, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x36, 0x0a, 0x19, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x22, 0x38, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x1a, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x63, 0x6b, 0x22, 0x62, 0x0a, 0x16, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0xbb,
	0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x67, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x05, 0x22, 0x4c, 0x0a, 0x19,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x1a, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x55, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x22, 0x42, 0x0a, 0x1f,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x64,
	0x22, 0xe1, 0x01, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42,
	0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x06, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x7d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12,
	0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x10, 0x06, 0x22, 0x33, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfa, 0x01, 0x0a, 0x1e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42,
	0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x05, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x06, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x68, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x05, 0x22, 0x3a,
	0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x1c, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x68, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x05, 0x22, 0x38, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x22, 0xc6, 0x01,
	0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x68, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x05, 0x22, 0x38, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64,
	0x22, 0xc6, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x68, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x05, 0x22, 0x36, 0x0a, 0x19, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x22, 0xc2, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x46,
	0x61, 0x69, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x68, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x05, 0x22, 0x38, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x73,
	0x22, 0xeb, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x22, 0x68, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x05, 0x22, 0x1e,
	0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x48, 0x65, 0x61, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xef,
	0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x48, 0x65, 0x61, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x48, 0x65, 0x61, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x25, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x68, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41,
	0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x05,
	0x22, 0x4c, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xf9,
	0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x22, 0x68, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x05, 0x22, 0x53, 0x0a, 0x18, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22,
	0xf0, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x12,
	0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x05, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_consensus_pb2_consensus_proto_rawDescOnce sync.Once
	file_protobuf_consensus_pb2_consensus_proto_rawDescData = file_protobuf_consensus_pb2_consensus_proto_rawDesc
)

func file_protobuf_consensus_pb2_consensus_proto_rawDescGZIP() []byte {
	file_protobuf_consensus_pb2_consensus_proto_rawDescOnce.Do(func() {
		file_protobuf_consensus_pb2_consensus_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_consensus_pb2_consensus_proto_rawDescData)
	})
	return file_protobuf_consensus_pb2_consensus_proto_rawDescData
}

var file_protobuf_consensus_pb2_consensus_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_protobuf_consensus_pb2_consensus_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_protobuf_consensus_pb2_consensus_proto_goTypes = []interface{}{
	(ConsensusRegisterResponse_Status)(0),        // 0: ConsensusRegisterResponse.Status
	(ConsensusSendToResponse_Status)(0),          // 1: ConsensusSendToResponse.Status
	(ConsensusBroadcastResponse_Status)(0),       // 2: ConsensusBroadcastResponse.Status
	(ConsensusInitializeBlockResponse_Status)(0), // 3: ConsensusInitializeBlockResponse.Status
	(ConsensusSummarizeBlockResponse_Status)(0),  // 4: ConsensusSummarizeBlockResponse.Status
	(ConsensusFinalizeBlockResponse_Status)(0),   // 5: ConsensusFinalizeBlockResponse.Status
	(ConsensusCancelBlockResponse_Status)(0),     // 6: ConsensusCancelBlockResponse.Status
	(ConsensusCheckBlocksResponse_Status)(0),     // 7: ConsensusCheckBlocksResponse.Status
	(ConsensusCommitBlockResponse_Status)(0),     // 8: ConsensusCommitBlockResponse.Status
	(ConsensusIgnoreBlockResponse_Status)(0),     // 9: ConsensusIgnoreBlockResponse.Status
	(ConsensusFailBlockResponse_Status)(0),       // 10: ConsensusFailBlockResponse.Status
	(ConsensusBlocksGetResponse_Status)(0),       // 11: ConsensusBlocksGetResponse.Status
	(ConsensusChainHeadGetResponse_Status)(0),    // 12: ConsensusChainHeadGetResponse.Status
	(ConsensusSettingsGetResponse_Status)(0),     // 13: ConsensusSettingsGetResponse.Status
	(ConsensusStateGetResponse_Status)(0),        // 14: ConsensusStateGetResponse.Status
	(*ConsensusPeerMessage)(nil),                 // 15: ConsensusPeerMessage
	(*ConsensusBlock)(nil),                       // 16: ConsensusBlock
	(*ConsensusPeerInfo)(nil),                    // 17: ConsensusPeerInfo
	(*ConsensusSettingsEntry)(nil),               // 18: ConsensusSettingsEntry
	(*ConsensusStateEntry)(nil),                  // 19: ConsensusStateEntry
	(*ConsensusRegisterRequest)(nil),             // 20: ConsensusRegisterRequest
	(*ConsensusRegisterResponse)(nil),            // 21: ConsensusRegisterResponse
	(*ConsensusNotifyPeerConnected)(nil),         // 22: ConsensusNotifyPeerConnected
	(*ConsensusNotifyPeerDisconnected)(nil),      // 23: ConsensusNotifyPeerDisconnected
	(*ConsensusNotifyPeerMessage)(nil),           // 24: ConsensusNotifyPeerMessage
	(*ConsensusNotifyBlockNew)(nil),              // 25: ConsensusNotifyBlockNew
	(*ConsensusNotifyBlockValid)(nil),            // 26: ConsensusNotifyBlockValid
	(*ConsensusNotifyBlockInvalid)(nil),          // 27: ConsensusNotifyBlockInvalid
	(*ConsensusNotifyBlockCommit)(nil),           // 28: ConsensusNotifyBlockCommit
	(*ConsensusNotifyAck)(nil),                   // 29: ConsensusNotifyAck
	(*ConsensusSendToRequest)(nil),               // 30: ConsensusSendToRequest
	(*ConsensusSendToResponse)(nil),              // 31: ConsensusSendToResponse
	(*ConsensusBroadcastRequest)(nil),            // 32: ConsensusBroadcastRequest
	(*ConsensusBroadcastResponse)(nil),           // 33: ConsensusBroadcastResponse
	(*ConsensusInitializeBlockRequest)(nil),      // 34: ConsensusInitializeBlockRequest
	(*ConsensusInitializeBlockResponse)(nil),     // 35: ConsensusInitializeBlockResponse
	(*ConsensusSummarizeBlockRequest)(nil),       // 36: ConsensusSummarizeBlockRequest
	(*ConsensusSummarizeBlockResponse)(nil),      // 37: ConsensusSummarizeBlockResponse
	(*ConsensusFinalizeBlockRequest)(nil),        // 38: ConsensusFinalizeBlockRequest
	(*ConsensusFinalizeBlockResponse)(nil),       // 39: ConsensusFinalizeBlockResponse
	(*ConsensusCancelBlockRequest)(nil),          // 40: ConsensusCancelBlockRequest
	(*ConsensusCancelBlockResponse)(nil),         // 41: ConsensusCancelBlockResponse
	(*ConsensusCheckBlocksRequest)(nil),          // 42: ConsensusCheckBlocksRequest
	(*ConsensusCheckBlocksResponse)(nil),         // 43: ConsensusCheckBlocksResponse
	(*ConsensusCommitBlockRequest)(nil),          // 44: ConsensusCommitBlockRequest
	(*ConsensusCommitBlockResponse)(nil),         // 45: ConsensusCommitBlockResponse
	(*ConsensusIgnoreBlockRequest)(nil),          // 46: ConsensusIgnoreBlockRequest
	(*ConsensusIgnoreBlockResponse)(nil),         // 47: ConsensusIgnoreBlockResponse
	(*ConsensusFailBlockRequest)(nil),            // 48: ConsensusFailBlockRequest
	(*ConsensusFailBlockResponse)(nil),           // 49: ConsensusFailBlockResponse
	(*ConsensusBlocksGetRequest)(nil),            // 50: ConsensusBlocksGetRequest
	(*ConsensusBlocksGetResponse)(nil),           // 51: ConsensusBlocksGetResponse
	(*ConsensusChainHeadGetRequest)(nil),         // 52: ConsensusChainHeadGetRequest
	(*ConsensusChainHeadGetResponse)(nil),        // 53: ConsensusChainHeadGetResponse
	(*ConsensusSettingsGetRequest)(nil),          // 54: ConsensusSettingsGetRequest
	(*ConsensusSettingsGetResponse)(nil),         // 55: ConsensusSettingsGetResponse
	(*ConsensusStateGetRequest)(nil),             // 56: ConsensusStateGetRequest
	(*ConsensusStateGetResponse)(nil),            // 57: ConsensusStateGetResponse
}
var file_protobuf_consensus_pb2_consensus_proto_depIdxs = []int32{
	0,  // 0: ConsensusRegisterResponse.status:type_name -> ConsensusRegisterResponse.Status
	16, // 1: ConsensusRegisterResponse.chain_head:type_name -> ConsensusBlock
	17, // 2: ConsensusRegisterResponse.peers:type_name -> ConsensusPeerInfo
	17, // 3: ConsensusRegisterResponse.local_peer_info:type_name -> ConsensusPeerInfo
	17, // 4: ConsensusNotifyPeerConnected.peer_info:type_name -> ConsensusPeerInfo
	15, // 5: ConsensusNotifyPeerMessage.message:type_name -> ConsensusPeerMessage
	16, // 6: ConsensusNotifyBlockNew.block:type_name -> ConsensusBlock
	15, // 7: ConsensusSendToRequest.message:type_name -> ConsensusPeerMessage
	1,  // 8: ConsensusSendToResponse.status:type_name -> ConsensusSendToResponse.Status
	15, // 9: ConsensusBroadcastRequest.message:type_name -> ConsensusPeerMessage
	2,  // 10: ConsensusBroadcastResponse.status:type_name -> ConsensusBroadcastResponse.Status
	3,  // 11: ConsensusInitializeBlockResponse.status:type_name -> ConsensusInitializeBlockResponse.Status
	4,  // 12: ConsensusSummarizeBlockResponse.status:type_name -> ConsensusSummarizeBlockResponse.Status
	5,  // 13: ConsensusFinalizeBlockResponse.status:type_name -> ConsensusFinalizeBlockResponse.Status
	6,  // 14: ConsensusCancelBlockResponse.status:type_name -> ConsensusCancelBlockResponse.Status
	7,  // 15: ConsensusCheckBlocksResponse.status:type_name -> ConsensusCheckBlocksResponse.Status
	8,  // 16: ConsensusCommitBlockResponse.status:type_name -> ConsensusCommitBlockResponse.Status
	9,  // 17: ConsensusIgnoreBlockResponse.status:type_name -> ConsensusIgnoreBlockResponse.Status
	10, // 18: ConsensusFailBlockResponse.status:type_name -> ConsensusFailBlockResponse.Status
	11, // 19: ConsensusBlocksGetResponse.status:type_name -> ConsensusBlocksGetResponse.Status
	16, // 20: ConsensusBlocksGetResponse.blocks:type_name -> ConsensusBlock
	12, // 21: ConsensusChainHeadGetResponse.status:type_name -> ConsensusChainHeadGetResponse.Status
	16, // 22: ConsensusChainHeadGetResponse.block:type_name -> ConsensusBlock
	13, // 23: ConsensusSettingsGetResponse.status:type_name -> ConsensusSettingsGetResponse.Status
	18, // 24: ConsensusSettingsGetResponse.entries:type_name -> ConsensusSettingsEntry
	14, // 25: ConsensusStateGetResponse.status:type_name -> ConsensusStateGetResponse.Status
	19, // 26: ConsensusStateGetResponse.entries:type_name -> ConsensusStateEntry
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_protobuf_consensus_pb2_consensus_proto_init() }
func file_protobuf_consensus_pb2_consensus_proto_init() {
	if File_protobuf_consensus_pb2_consensus_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusPeerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusPeerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusSettingsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusStateEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusRegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusNotifyPeerConnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusNotifyPeerDisconnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusNotifyPeerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusNotifyBlockNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusNotifyBlockValid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusNotifyBlockInvalid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusNotifyBlockCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusNotifyAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusSendToRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusSendToResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusBroadcastRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusBroadcastResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusInitializeBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusInitializeBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusSummarizeBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusSummarizeBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusFinalizeBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusFinalizeBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusCancelBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusCancelBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusCheckBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusCheckBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusCommitBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusCommitBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusIgnoreBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusIgnoreBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusFailBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusFailBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusBlocksGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusBlocksGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusChainHeadGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusChainHeadGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusSettingsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusSettingsGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusStateGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_consensus_pb2_consensus_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusStateGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_consensus_pb2_consensus_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobuf_consensus_pb2_consensus_proto_goTypes,
		DependencyIndexes: file_protobuf_consensus_pb2_consensus_proto_depIdxs,
		EnumInfos:         file_protobuf_consensus_pb2_consensus_proto_enumTypes,
		MessageInfos:      file_protobuf_consensus_pb2_consensus_proto_msgTypes,
	}.Build()
	File_protobuf_consensus_pb2_consensus_proto = out.File
	file_protobuf_consensus_pb2_consensus_proto_rawDesc = nil
	file_protobuf_consensus_pb2_consensus_proto_goTypes = nil
	file_protobuf_consensus_pb2_consensus_proto_depIdxs = nil
}
