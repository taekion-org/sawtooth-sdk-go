// Copyright 2016, 2017 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: protobuf/validator_pb2/validator.proto

package validator_pb2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message_MessageType int32

const (
	Message_DEFAULT Message_MessageType = 0
	// Registration request from the transaction processor to the validator
	Message_TP_REGISTER_REQUEST Message_MessageType = 1
	// Registration response from the validator to the
	// transaction processor
	Message_TP_REGISTER_RESPONSE Message_MessageType = 2
	// Tell the validator that the transaction processor
	// won't take any more transactions
	Message_TP_UNREGISTER_REQUEST Message_MessageType = 3
	// Response from the validator to the tp that it won't
	// send any more transactions
	Message_TP_UNREGISTER_RESPONSE Message_MessageType = 4
	// Process Request from the validator/executor to the
	// transaction processor
	Message_TP_PROCESS_REQUEST Message_MessageType = 5
	// Process response from the transaction processor to the validator/executor
	Message_TP_PROCESS_RESPONSE Message_MessageType = 6
	// State get request from the transaction processor to validator/context_manager
	Message_TP_STATE_GET_REQUEST Message_MessageType = 7
	// State get response from the validator/context_manager to the transaction processor
	Message_TP_STATE_GET_RESPONSE Message_MessageType = 8
	// State set request from the transaction processor to the validator/context_manager
	Message_TP_STATE_SET_REQUEST Message_MessageType = 9
	// State set response from the validator/context_manager to the transaction processor
	Message_TP_STATE_SET_RESPONSE Message_MessageType = 10
	// State delete request from the transaction processor to the validator/context_manager
	Message_TP_STATE_DELETE_REQUEST Message_MessageType = 11
	// State delete response from the validator/context_manager to the transaction processor
	Message_TP_STATE_DELETE_RESPONSE Message_MessageType = 12
	// Message to append data to a transaction receipt
	Message_TP_RECEIPT_ADD_DATA_REQUEST Message_MessageType = 13
	// Response from validator to tell transaction processor that data has been appended
	Message_TP_RECEIPT_ADD_DATA_RESPONSE Message_MessageType = 14
	// Message to add event
	Message_TP_EVENT_ADD_REQUEST Message_MessageType = 15
	// Response from validator to tell transaction processor that event has been created
	Message_TP_EVENT_ADD_RESPONSE Message_MessageType = 16
	// Submission of a batchlist from the web api or another client to the validator
	Message_CLIENT_BATCH_SUBMIT_REQUEST Message_MessageType = 100
	// Response from the validator to the web api/client that the submission was accepted
	Message_CLIENT_BATCH_SUBMIT_RESPONSE Message_MessageType = 101
	// A request to list blocks from the web api/client to the validator
	Message_CLIENT_BLOCK_LIST_REQUEST        Message_MessageType = 102
	Message_CLIENT_BLOCK_LIST_RESPONSE       Message_MessageType = 103
	Message_CLIENT_BLOCK_GET_BY_ID_REQUEST   Message_MessageType = 104
	Message_CLIENT_BLOCK_GET_RESPONSE        Message_MessageType = 105
	Message_CLIENT_BATCH_LIST_REQUEST        Message_MessageType = 106
	Message_CLIENT_BATCH_LIST_RESPONSE       Message_MessageType = 107
	Message_CLIENT_BATCH_GET_REQUEST         Message_MessageType = 108
	Message_CLIENT_BATCH_GET_RESPONSE        Message_MessageType = 109
	Message_CLIENT_TRANSACTION_LIST_REQUEST  Message_MessageType = 110
	Message_CLIENT_TRANSACTION_LIST_RESPONSE Message_MessageType = 111
	Message_CLIENT_TRANSACTION_GET_REQUEST   Message_MessageType = 112
	Message_CLIENT_TRANSACTION_GET_RESPONSE  Message_MessageType = 113
	// Client state request of the current state hash to be retrieved from the journal
	Message_CLIENT_STATE_CURRENT_REQUEST Message_MessageType = 114
	// Response with the current state hash
	Message_CLIENT_STATE_CURRENT_RESPONSE Message_MessageType = 115
	// A request of all the addresses under a particular prefix, for a state hash.
	Message_CLIENT_STATE_LIST_REQUEST Message_MessageType = 116
	// The response of the addresses
	Message_CLIENT_STATE_LIST_RESPONSE Message_MessageType = 117
	// Get the address:data entry at a particular address
	Message_CLIENT_STATE_GET_REQUEST Message_MessageType = 118
	// The response with the entry
	Message_CLIENT_STATE_GET_RESPONSE Message_MessageType = 119
	// A request for the status of a batch or batches
	Message_CLIENT_BATCH_STATUS_REQUEST Message_MessageType = 120
	// A response with the batch statuses
	Message_CLIENT_BATCH_STATUS_RESPONSE Message_MessageType = 121
	// A request for one or more transaction receipts
	Message_CLIENT_RECEIPT_GET_REQUEST Message_MessageType = 122
	// A response with the receipts
	Message_CLIENT_RECEIPT_GET_RESPONSE     Message_MessageType = 123
	Message_CLIENT_BLOCK_GET_BY_NUM_REQUEST Message_MessageType = 124
	// A request for a validator's peers
	Message_CLIENT_PEERS_GET_REQUEST Message_MessageType = 125
	// A response with the validator's peers
	Message_CLIENT_PEERS_GET_RESPONSE                  Message_MessageType = 126
	Message_CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST Message_MessageType = 127
	Message_CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST       Message_MessageType = 128
	// A request for a validator's status
	Message_CLIENT_STATUS_GET_REQUEST Message_MessageType = 129
	// A response with the validator's status
	Message_CLIENT_STATUS_GET_RESPONSE Message_MessageType = 130
	// Message types for events
	Message_CLIENT_EVENTS_SUBSCRIBE_REQUEST    Message_MessageType = 500
	Message_CLIENT_EVENTS_SUBSCRIBE_RESPONSE   Message_MessageType = 501
	Message_CLIENT_EVENTS_UNSUBSCRIBE_REQUEST  Message_MessageType = 502
	Message_CLIENT_EVENTS_UNSUBSCRIBE_RESPONSE Message_MessageType = 503
	Message_CLIENT_EVENTS                      Message_MessageType = 504
	Message_CLIENT_EVENTS_GET_REQUEST          Message_MessageType = 505
	Message_CLIENT_EVENTS_GET_RESPONSE         Message_MessageType = 506
	// Temp message types until a discussion can be had about gossip msg
	Message_GOSSIP_MESSAGE                         Message_MessageType = 200
	Message_GOSSIP_REGISTER                        Message_MessageType = 201
	Message_GOSSIP_UNREGISTER                      Message_MessageType = 202
	Message_GOSSIP_BLOCK_REQUEST                   Message_MessageType = 205
	Message_GOSSIP_BLOCK_RESPONSE                  Message_MessageType = 206
	Message_GOSSIP_BATCH_BY_BATCH_ID_REQUEST       Message_MessageType = 207
	Message_GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST Message_MessageType = 208
	Message_GOSSIP_BATCH_RESPONSE                  Message_MessageType = 209
	Message_GOSSIP_GET_PEERS_REQUEST               Message_MessageType = 210
	Message_GOSSIP_GET_PEERS_RESPONSE              Message_MessageType = 211
	Message_GOSSIP_CONSENSUS_MESSAGE               Message_MessageType = 212
	Message_NETWORK_ACK                            Message_MessageType = 300
	Message_NETWORK_CONNECT                        Message_MessageType = 301
	Message_NETWORK_DISCONNECT                     Message_MessageType = 302
	// Message types for Authorization Types
	Message_AUTHORIZATION_CONNECTION_RESPONSE Message_MessageType = 600
	Message_AUTHORIZATION_VIOLATION           Message_MessageType = 601
	Message_AUTHORIZATION_TRUST_REQUEST       Message_MessageType = 602
	Message_AUTHORIZATION_TRUST_RESPONSE      Message_MessageType = 603
	Message_AUTHORIZATION_CHALLENGE_REQUEST   Message_MessageType = 604
	Message_AUTHORIZATION_CHALLENGE_RESPONSE  Message_MessageType = 605
	Message_AUTHORIZATION_CHALLENGE_SUBMIT    Message_MessageType = 606
	Message_AUTHORIZATION_CHALLENGE_RESULT    Message_MessageType = 607
	Message_PING_REQUEST                      Message_MessageType = 700
	Message_PING_RESPONSE                     Message_MessageType = 701
	// Consensus service messages
	Message_CONSENSUS_REGISTER_REQUEST          Message_MessageType = 800
	Message_CONSENSUS_REGISTER_RESPONSE         Message_MessageType = 801
	Message_CONSENSUS_SEND_TO_REQUEST           Message_MessageType = 802
	Message_CONSENSUS_SEND_TO_RESPONSE          Message_MessageType = 803
	Message_CONSENSUS_BROADCAST_REQUEST         Message_MessageType = 804
	Message_CONSENSUS_BROADCAST_RESPONSE        Message_MessageType = 805
	Message_CONSENSUS_INITIALIZE_BLOCK_REQUEST  Message_MessageType = 806
	Message_CONSENSUS_INITIALIZE_BLOCK_RESPONSE Message_MessageType = 807
	Message_CONSENSUS_FINALIZE_BLOCK_REQUEST    Message_MessageType = 808
	Message_CONSENSUS_FINALIZE_BLOCK_RESPONSE   Message_MessageType = 809
	Message_CONSENSUS_SUMMARIZE_BLOCK_REQUEST   Message_MessageType = 828
	Message_CONSENSUS_SUMMARIZE_BLOCK_RESPONSE  Message_MessageType = 829
	Message_CONSENSUS_CANCEL_BLOCK_REQUEST      Message_MessageType = 810
	Message_CONSENSUS_CANCEL_BLOCK_RESPONSE     Message_MessageType = 811
	Message_CONSENSUS_CHECK_BLOCKS_REQUEST      Message_MessageType = 812
	Message_CONSENSUS_CHECK_BLOCKS_RESPONSE     Message_MessageType = 813
	Message_CONSENSUS_COMMIT_BLOCK_REQUEST      Message_MessageType = 814
	Message_CONSENSUS_COMMIT_BLOCK_RESPONSE     Message_MessageType = 815
	Message_CONSENSUS_IGNORE_BLOCK_REQUEST      Message_MessageType = 816
	Message_CONSENSUS_IGNORE_BLOCK_RESPONSE     Message_MessageType = 817
	Message_CONSENSUS_FAIL_BLOCK_REQUEST        Message_MessageType = 818
	Message_CONSENSUS_FAIL_BLOCK_RESPONSE       Message_MessageType = 819
	Message_CONSENSUS_SETTINGS_GET_REQUEST      Message_MessageType = 820
	Message_CONSENSUS_SETTINGS_GET_RESPONSE     Message_MessageType = 821
	Message_CONSENSUS_STATE_GET_REQUEST         Message_MessageType = 822
	Message_CONSENSUS_STATE_GET_RESPONSE        Message_MessageType = 823
	Message_CONSENSUS_BLOCKS_GET_REQUEST        Message_MessageType = 824
	Message_CONSENSUS_BLOCKS_GET_RESPONSE       Message_MessageType = 825
	Message_CONSENSUS_CHAIN_HEAD_GET_REQUEST    Message_MessageType = 826
	Message_CONSENSUS_CHAIN_HEAD_GET_RESPONSE   Message_MessageType = 827
	// Consensus notification messages
	Message_CONSENSUS_NOTIFY_PEER_CONNECTED    Message_MessageType = 900
	Message_CONSENSUS_NOTIFY_PEER_DISCONNECTED Message_MessageType = 901
	Message_CONSENSUS_NOTIFY_PEER_MESSAGE      Message_MessageType = 902
	Message_CONSENSUS_NOTIFY_BLOCK_NEW         Message_MessageType = 903
	Message_CONSENSUS_NOTIFY_BLOCK_VALID       Message_MessageType = 904
	Message_CONSENSUS_NOTIFY_BLOCK_INVALID     Message_MessageType = 905
	Message_CONSENSUS_NOTIFY_BLOCK_COMMIT      Message_MessageType = 906
	Message_CONSENSUS_NOTIFY_ACK               Message_MessageType = 999
)

// Enum value maps for Message_MessageType.
var (
	Message_MessageType_name = map[int32]string{
		0:   "DEFAULT",
		1:   "TP_REGISTER_REQUEST",
		2:   "TP_REGISTER_RESPONSE",
		3:   "TP_UNREGISTER_REQUEST",
		4:   "TP_UNREGISTER_RESPONSE",
		5:   "TP_PROCESS_REQUEST",
		6:   "TP_PROCESS_RESPONSE",
		7:   "TP_STATE_GET_REQUEST",
		8:   "TP_STATE_GET_RESPONSE",
		9:   "TP_STATE_SET_REQUEST",
		10:  "TP_STATE_SET_RESPONSE",
		11:  "TP_STATE_DELETE_REQUEST",
		12:  "TP_STATE_DELETE_RESPONSE",
		13:  "TP_RECEIPT_ADD_DATA_REQUEST",
		14:  "TP_RECEIPT_ADD_DATA_RESPONSE",
		15:  "TP_EVENT_ADD_REQUEST",
		16:  "TP_EVENT_ADD_RESPONSE",
		100: "CLIENT_BATCH_SUBMIT_REQUEST",
		101: "CLIENT_BATCH_SUBMIT_RESPONSE",
		102: "CLIENT_BLOCK_LIST_REQUEST",
		103: "CLIENT_BLOCK_LIST_RESPONSE",
		104: "CLIENT_BLOCK_GET_BY_ID_REQUEST",
		105: "CLIENT_BLOCK_GET_RESPONSE",
		106: "CLIENT_BATCH_LIST_REQUEST",
		107: "CLIENT_BATCH_LIST_RESPONSE",
		108: "CLIENT_BATCH_GET_REQUEST",
		109: "CLIENT_BATCH_GET_RESPONSE",
		110: "CLIENT_TRANSACTION_LIST_REQUEST",
		111: "CLIENT_TRANSACTION_LIST_RESPONSE",
		112: "CLIENT_TRANSACTION_GET_REQUEST",
		113: "CLIENT_TRANSACTION_GET_RESPONSE",
		114: "CLIENT_STATE_CURRENT_REQUEST",
		115: "CLIENT_STATE_CURRENT_RESPONSE",
		116: "CLIENT_STATE_LIST_REQUEST",
		117: "CLIENT_STATE_LIST_RESPONSE",
		118: "CLIENT_STATE_GET_REQUEST",
		119: "CLIENT_STATE_GET_RESPONSE",
		120: "CLIENT_BATCH_STATUS_REQUEST",
		121: "CLIENT_BATCH_STATUS_RESPONSE",
		122: "CLIENT_RECEIPT_GET_REQUEST",
		123: "CLIENT_RECEIPT_GET_RESPONSE",
		124: "CLIENT_BLOCK_GET_BY_NUM_REQUEST",
		125: "CLIENT_PEERS_GET_REQUEST",
		126: "CLIENT_PEERS_GET_RESPONSE",
		127: "CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST",
		128: "CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST",
		129: "CLIENT_STATUS_GET_REQUEST",
		130: "CLIENT_STATUS_GET_RESPONSE",
		500: "CLIENT_EVENTS_SUBSCRIBE_REQUEST",
		501: "CLIENT_EVENTS_SUBSCRIBE_RESPONSE",
		502: "CLIENT_EVENTS_UNSUBSCRIBE_REQUEST",
		503: "CLIENT_EVENTS_UNSUBSCRIBE_RESPONSE",
		504: "CLIENT_EVENTS",
		505: "CLIENT_EVENTS_GET_REQUEST",
		506: "CLIENT_EVENTS_GET_RESPONSE",
		200: "GOSSIP_MESSAGE",
		201: "GOSSIP_REGISTER",
		202: "GOSSIP_UNREGISTER",
		205: "GOSSIP_BLOCK_REQUEST",
		206: "GOSSIP_BLOCK_RESPONSE",
		207: "GOSSIP_BATCH_BY_BATCH_ID_REQUEST",
		208: "GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST",
		209: "GOSSIP_BATCH_RESPONSE",
		210: "GOSSIP_GET_PEERS_REQUEST",
		211: "GOSSIP_GET_PEERS_RESPONSE",
		212: "GOSSIP_CONSENSUS_MESSAGE",
		300: "NETWORK_ACK",
		301: "NETWORK_CONNECT",
		302: "NETWORK_DISCONNECT",
		600: "AUTHORIZATION_CONNECTION_RESPONSE",
		601: "AUTHORIZATION_VIOLATION",
		602: "AUTHORIZATION_TRUST_REQUEST",
		603: "AUTHORIZATION_TRUST_RESPONSE",
		604: "AUTHORIZATION_CHALLENGE_REQUEST",
		605: "AUTHORIZATION_CHALLENGE_RESPONSE",
		606: "AUTHORIZATION_CHALLENGE_SUBMIT",
		607: "AUTHORIZATION_CHALLENGE_RESULT",
		700: "PING_REQUEST",
		701: "PING_RESPONSE",
		800: "CONSENSUS_REGISTER_REQUEST",
		801: "CONSENSUS_REGISTER_RESPONSE",
		802: "CONSENSUS_SEND_TO_REQUEST",
		803: "CONSENSUS_SEND_TO_RESPONSE",
		804: "CONSENSUS_BROADCAST_REQUEST",
		805: "CONSENSUS_BROADCAST_RESPONSE",
		806: "CONSENSUS_INITIALIZE_BLOCK_REQUEST",
		807: "CONSENSUS_INITIALIZE_BLOCK_RESPONSE",
		808: "CONSENSUS_FINALIZE_BLOCK_REQUEST",
		809: "CONSENSUS_FINALIZE_BLOCK_RESPONSE",
		828: "CONSENSUS_SUMMARIZE_BLOCK_REQUEST",
		829: "CONSENSUS_SUMMARIZE_BLOCK_RESPONSE",
		810: "CONSENSUS_CANCEL_BLOCK_REQUEST",
		811: "CONSENSUS_CANCEL_BLOCK_RESPONSE",
		812: "CONSENSUS_CHECK_BLOCKS_REQUEST",
		813: "CONSENSUS_CHECK_BLOCKS_RESPONSE",
		814: "CONSENSUS_COMMIT_BLOCK_REQUEST",
		815: "CONSENSUS_COMMIT_BLOCK_RESPONSE",
		816: "CONSENSUS_IGNORE_BLOCK_REQUEST",
		817: "CONSENSUS_IGNORE_BLOCK_RESPONSE",
		818: "CONSENSUS_FAIL_BLOCK_REQUEST",
		819: "CONSENSUS_FAIL_BLOCK_RESPONSE",
		820: "CONSENSUS_SETTINGS_GET_REQUEST",
		821: "CONSENSUS_SETTINGS_GET_RESPONSE",
		822: "CONSENSUS_STATE_GET_REQUEST",
		823: "CONSENSUS_STATE_GET_RESPONSE",
		824: "CONSENSUS_BLOCKS_GET_REQUEST",
		825: "CONSENSUS_BLOCKS_GET_RESPONSE",
		826: "CONSENSUS_CHAIN_HEAD_GET_REQUEST",
		827: "CONSENSUS_CHAIN_HEAD_GET_RESPONSE",
		900: "CONSENSUS_NOTIFY_PEER_CONNECTED",
		901: "CONSENSUS_NOTIFY_PEER_DISCONNECTED",
		902: "CONSENSUS_NOTIFY_PEER_MESSAGE",
		903: "CONSENSUS_NOTIFY_BLOCK_NEW",
		904: "CONSENSUS_NOTIFY_BLOCK_VALID",
		905: "CONSENSUS_NOTIFY_BLOCK_INVALID",
		906: "CONSENSUS_NOTIFY_BLOCK_COMMIT",
		999: "CONSENSUS_NOTIFY_ACK",
	}
	Message_MessageType_value = map[string]int32{
		"DEFAULT":                                    0,
		"TP_REGISTER_REQUEST":                        1,
		"TP_REGISTER_RESPONSE":                       2,
		"TP_UNREGISTER_REQUEST":                      3,
		"TP_UNREGISTER_RESPONSE":                     4,
		"TP_PROCESS_REQUEST":                         5,
		"TP_PROCESS_RESPONSE":                        6,
		"TP_STATE_GET_REQUEST":                       7,
		"TP_STATE_GET_RESPONSE":                      8,
		"TP_STATE_SET_REQUEST":                       9,
		"TP_STATE_SET_RESPONSE":                      10,
		"TP_STATE_DELETE_REQUEST":                    11,
		"TP_STATE_DELETE_RESPONSE":                   12,
		"TP_RECEIPT_ADD_DATA_REQUEST":                13,
		"TP_RECEIPT_ADD_DATA_RESPONSE":               14,
		"TP_EVENT_ADD_REQUEST":                       15,
		"TP_EVENT_ADD_RESPONSE":                      16,
		"CLIENT_BATCH_SUBMIT_REQUEST":                100,
		"CLIENT_BATCH_SUBMIT_RESPONSE":               101,
		"CLIENT_BLOCK_LIST_REQUEST":                  102,
		"CLIENT_BLOCK_LIST_RESPONSE":                 103,
		"CLIENT_BLOCK_GET_BY_ID_REQUEST":             104,
		"CLIENT_BLOCK_GET_RESPONSE":                  105,
		"CLIENT_BATCH_LIST_REQUEST":                  106,
		"CLIENT_BATCH_LIST_RESPONSE":                 107,
		"CLIENT_BATCH_GET_REQUEST":                   108,
		"CLIENT_BATCH_GET_RESPONSE":                  109,
		"CLIENT_TRANSACTION_LIST_REQUEST":            110,
		"CLIENT_TRANSACTION_LIST_RESPONSE":           111,
		"CLIENT_TRANSACTION_GET_REQUEST":             112,
		"CLIENT_TRANSACTION_GET_RESPONSE":            113,
		"CLIENT_STATE_CURRENT_REQUEST":               114,
		"CLIENT_STATE_CURRENT_RESPONSE":              115,
		"CLIENT_STATE_LIST_REQUEST":                  116,
		"CLIENT_STATE_LIST_RESPONSE":                 117,
		"CLIENT_STATE_GET_REQUEST":                   118,
		"CLIENT_STATE_GET_RESPONSE":                  119,
		"CLIENT_BATCH_STATUS_REQUEST":                120,
		"CLIENT_BATCH_STATUS_RESPONSE":               121,
		"CLIENT_RECEIPT_GET_REQUEST":                 122,
		"CLIENT_RECEIPT_GET_RESPONSE":                123,
		"CLIENT_BLOCK_GET_BY_NUM_REQUEST":            124,
		"CLIENT_PEERS_GET_REQUEST":                   125,
		"CLIENT_PEERS_GET_RESPONSE":                  126,
		"CLIENT_BLOCK_GET_BY_TRANSACTION_ID_REQUEST": 127,
		"CLIENT_BLOCK_GET_BY_BATCH_ID_REQUEST":       128,
		"CLIENT_STATUS_GET_REQUEST":                  129,
		"CLIENT_STATUS_GET_RESPONSE":                 130,
		"CLIENT_EVENTS_SUBSCRIBE_REQUEST":            500,
		"CLIENT_EVENTS_SUBSCRIBE_RESPONSE":           501,
		"CLIENT_EVENTS_UNSUBSCRIBE_REQUEST":          502,
		"CLIENT_EVENTS_UNSUBSCRIBE_RESPONSE":         503,
		"CLIENT_EVENTS":                              504,
		"CLIENT_EVENTS_GET_REQUEST":                  505,
		"CLIENT_EVENTS_GET_RESPONSE":                 506,
		"GOSSIP_MESSAGE":                             200,
		"GOSSIP_REGISTER":                            201,
		"GOSSIP_UNREGISTER":                          202,
		"GOSSIP_BLOCK_REQUEST":                       205,
		"GOSSIP_BLOCK_RESPONSE":                      206,
		"GOSSIP_BATCH_BY_BATCH_ID_REQUEST":           207,
		"GOSSIP_BATCH_BY_TRANSACTION_ID_REQUEST":     208,
		"GOSSIP_BATCH_RESPONSE":                      209,
		"GOSSIP_GET_PEERS_REQUEST":                   210,
		"GOSSIP_GET_PEERS_RESPONSE":                  211,
		"GOSSIP_CONSENSUS_MESSAGE":                   212,
		"NETWORK_ACK":                                300,
		"NETWORK_CONNECT":                            301,
		"NETWORK_DISCONNECT":                         302,
		"AUTHORIZATION_CONNECTION_RESPONSE":          600,
		"AUTHORIZATION_VIOLATION":                    601,
		"AUTHORIZATION_TRUST_REQUEST":                602,
		"AUTHORIZATION_TRUST_RESPONSE":               603,
		"AUTHORIZATION_CHALLENGE_REQUEST":            604,
		"AUTHORIZATION_CHALLENGE_RESPONSE":           605,
		"AUTHORIZATION_CHALLENGE_SUBMIT":             606,
		"AUTHORIZATION_CHALLENGE_RESULT":             607,
		"PING_REQUEST":                               700,
		"PING_RESPONSE":                              701,
		"CONSENSUS_REGISTER_REQUEST":                 800,
		"CONSENSUS_REGISTER_RESPONSE":                801,
		"CONSENSUS_SEND_TO_REQUEST":                  802,
		"CONSENSUS_SEND_TO_RESPONSE":                 803,
		"CONSENSUS_BROADCAST_REQUEST":                804,
		"CONSENSUS_BROADCAST_RESPONSE":               805,
		"CONSENSUS_INITIALIZE_BLOCK_REQUEST":         806,
		"CONSENSUS_INITIALIZE_BLOCK_RESPONSE":        807,
		"CONSENSUS_FINALIZE_BLOCK_REQUEST":           808,
		"CONSENSUS_FINALIZE_BLOCK_RESPONSE":          809,
		"CONSENSUS_SUMMARIZE_BLOCK_REQUEST":          828,
		"CONSENSUS_SUMMARIZE_BLOCK_RESPONSE":         829,
		"CONSENSUS_CANCEL_BLOCK_REQUEST":             810,
		"CONSENSUS_CANCEL_BLOCK_RESPONSE":            811,
		"CONSENSUS_CHECK_BLOCKS_REQUEST":             812,
		"CONSENSUS_CHECK_BLOCKS_RESPONSE":            813,
		"CONSENSUS_COMMIT_BLOCK_REQUEST":             814,
		"CONSENSUS_COMMIT_BLOCK_RESPONSE":            815,
		"CONSENSUS_IGNORE_BLOCK_REQUEST":             816,
		"CONSENSUS_IGNORE_BLOCK_RESPONSE":            817,
		"CONSENSUS_FAIL_BLOCK_REQUEST":               818,
		"CONSENSUS_FAIL_BLOCK_RESPONSE":              819,
		"CONSENSUS_SETTINGS_GET_REQUEST":             820,
		"CONSENSUS_SETTINGS_GET_RESPONSE":            821,
		"CONSENSUS_STATE_GET_REQUEST":                822,
		"CONSENSUS_STATE_GET_RESPONSE":               823,
		"CONSENSUS_BLOCKS_GET_REQUEST":               824,
		"CONSENSUS_BLOCKS_GET_RESPONSE":              825,
		"CONSENSUS_CHAIN_HEAD_GET_REQUEST":           826,
		"CONSENSUS_CHAIN_HEAD_GET_RESPONSE":          827,
		"CONSENSUS_NOTIFY_PEER_CONNECTED":            900,
		"CONSENSUS_NOTIFY_PEER_DISCONNECTED":         901,
		"CONSENSUS_NOTIFY_PEER_MESSAGE":              902,
		"CONSENSUS_NOTIFY_BLOCK_NEW":                 903,
		"CONSENSUS_NOTIFY_BLOCK_VALID":               904,
		"CONSENSUS_NOTIFY_BLOCK_INVALID":             905,
		"CONSENSUS_NOTIFY_BLOCK_COMMIT":              906,
		"CONSENSUS_NOTIFY_ACK":                       999,
	}
)

func (x Message_MessageType) Enum() *Message_MessageType {
	p := new(Message_MessageType)
	*p = x
	return p
}

func (x Message_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_validator_pb2_validator_proto_enumTypes[0].Descriptor()
}

func (Message_MessageType) Type() protoreflect.EnumType {
	return &file_protobuf_validator_pb2_validator_proto_enumTypes[0]
}

func (x Message_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_MessageType.Descriptor instead.
func (Message_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_validator_pb2_validator_proto_rawDescGZIP(), []int{1, 0}
}

// A list of messages to be transmitted together.
type MessageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *MessageList) Reset() {
	*x = MessageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_validator_pb2_validator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageList) ProtoMessage() {}

func (x *MessageList) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_validator_pb2_validator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageList.ProtoReflect.Descriptor instead.
func (*MessageList) Descriptor() ([]byte, []int) {
	return file_protobuf_validator_pb2_validator_proto_rawDescGZIP(), []int{0}
}

func (x *MessageList) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

// The message passed between the validator and client, containing the
// header fields and content.
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of message, used to determine how to 'route' the message
	// to the appropriate handler as well as how to deserialize the
	// content.
	MessageType Message_MessageType `protobuf:"varint,1,opt,name=message_type,json=messageType,proto3,enum=Message_MessageType" json:"message_type,omitempty"`
	// The identifier used to correlate response messages to their related
	// request messages.  correlation_id should be set to a random string
	// for messages which are not responses to previously sent messages.  For
	// response messages, correlation_id should be set to the same string as
	// contained in the request message.
	CorrelationId string `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// The content of the message, defined by message_type.  In many
	// cases, this data has been serialized with Protocol Buffers or
	// CBOR.
	Content []byte `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_validator_pb2_validator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_validator_pb2_validator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_protobuf_validator_pb2_validator_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetMessageType() Message_MessageType {
	if x != nil {
		return x.MessageType
	}
	return Message_DEFAULT
}

func (x *Message) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *Message) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

var File_protobuf_validator_pb2_validator_proto protoreflect.FileDescriptor

var file_protobuf_validator_pb2_validator_proto_rawDesc = []byte{
	0x0a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x62, 0x32, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x33, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xa5, 0x1f,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x9f, 0x1e, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x50, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x50, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x50, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x50,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x08,
	0x12, 0x18, 0x0a, 0x14, 0x54, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x0c,
	0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x5f, 0x41,
	0x44, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x50, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0f, 0x12, 0x19, 0x0a,
	0x15, 0x54, 0x50, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x64, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x66, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x67, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x68, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x69, 0x12, 0x1d, 0x0a,
	0x19, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x6a, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x6b, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x6c, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x6d, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x6e, 0x12, 0x24,
	0x0a, 0x20, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0x6f, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x70, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x71, 0x12, 0x20, 0x0a,
	0x1c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x72, 0x12,
	0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x10, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10,
	0x75, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x76, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x77, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x78, 0x12,
	0x20, 0x0a, 0x1c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10,
	0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x50, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x7a, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x50, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x10, 0x7b, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x7c, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x7d, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x45, 0x45, 0x52, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0x7e, 0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x7f, 0x12, 0x29, 0x0a, 0x24, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x42, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x80, 0x01, 0x12,
	0x1e, 0x0a, 0x19, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x81, 0x01, 0x12,
	0x1f, 0x0a, 0x1a, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x82, 0x01,
	0x12, 0x24, 0x0a, 0x1f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x53, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0xf4, 0x03, 0x12, 0x25, 0x0a, 0x20, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xf5, 0x03, 0x12, 0x26, 0x0a,
	0x21, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0xf6, 0x03, 0x12, 0x27, 0x0a, 0x22, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x42, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xf7, 0x03, 0x12, 0x12,
	0x0a, 0x0d, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10,
	0xf8, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0xf9, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x10, 0xfa, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x47, 0x4f, 0x53, 0x53, 0x49, 0x50, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0xc8, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x47, 0x4f, 0x53, 0x53,
	0x49, 0x50, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0xc9, 0x01, 0x12, 0x16,
	0x0a, 0x11, 0x47, 0x4f, 0x53, 0x53, 0x49, 0x50, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x10, 0xca, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x47, 0x4f, 0x53, 0x53, 0x49, 0x50,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xcd,
	0x01, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x4f, 0x53, 0x53, 0x49, 0x50, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xce, 0x01, 0x12, 0x25, 0x0a,
	0x20, 0x47, 0x4f, 0x53, 0x53, 0x49, 0x50, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x42, 0x59,
	0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0xcf, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x47, 0x4f, 0x53, 0x53, 0x49, 0x50, 0x5f, 0x42,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xd0,
	0x01, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x4f, 0x53, 0x53, 0x49, 0x50, 0x5f, 0x42, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xd1, 0x01, 0x12, 0x1d, 0x0a,
	0x18, 0x47, 0x4f, 0x53, 0x53, 0x49, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x45, 0x45, 0x52,
	0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xd2, 0x01, 0x12, 0x1e, 0x0a, 0x19,
	0x47, 0x4f, 0x53, 0x53, 0x49, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x53,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xd3, 0x01, 0x12, 0x1d, 0x0a, 0x18,
	0x47, 0x4f, 0x53, 0x53, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0xd4, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0xac, 0x02, 0x12, 0x14, 0x0a,
	0x0f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x10, 0xad, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0xae, 0x02, 0x12, 0x26, 0x0a, 0x21,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0xd8, 0x04, 0x12, 0x1c, 0x0a, 0x17, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0xd9, 0x04, 0x12, 0x20, 0x0a, 0x1b, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0xda, 0x04, 0x12, 0x21, 0x0a, 0x1c, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0xdb, 0x04, 0x12, 0x24, 0x0a, 0x1f, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xdc, 0x04, 0x12, 0x25, 0x0a,
	0x20, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0xdd, 0x04, 0x12, 0x23, 0x0a, 0x1e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f,
	0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x10, 0xde, 0x04, 0x12, 0x23, 0x0a, 0x1e, 0x41, 0x55, 0x54,
	0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0xdf, 0x04, 0x12, 0x11,
	0x0a, 0x0c, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xbc,
	0x05, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0xbd, 0x05, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53,
	0x55, 0x53, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0xa0, 0x06, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e,
	0x53, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xa1, 0x06, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x53,
	0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xa2, 0x06, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x53,
	0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xa3, 0x06, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x4f, 0x4e,
	0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xa4, 0x06, 0x12, 0x21, 0x0a, 0x1c, 0x43,
	0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41,
	0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xa5, 0x06, 0x12, 0x27,
	0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0xa6, 0x06, 0x12, 0x28, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x53, 0x45,
	0x4e, 0x53, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xa7,
	0x06, 0x12, 0x25, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x46,
	0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xa8, 0x06, 0x12, 0x26, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x53,
	0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xa9, 0x06,
	0x12, 0x26, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x53, 0x55,
	0x4d, 0x4d, 0x41, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xbc, 0x06, 0x12, 0x27, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x53,
	0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x49, 0x5a, 0x45, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xbd,
	0x06, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0xaa, 0x06, 0x12, 0x24, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e,
	0x53, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xab, 0x06, 0x12, 0x23, 0x0a, 0x1e,
	0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xac,
	0x06, 0x12, 0x24, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0xad, 0x06, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x53, 0x45,
	0x4e, 0x53, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xae, 0x06, 0x12, 0x24, 0x0a, 0x1f,
	0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10,
	0xaf, 0x06, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f,
	0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0xb0, 0x06, 0x12, 0x24, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x53, 0x45,
	0x4e, 0x53, 0x55, 0x53, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xb1, 0x06, 0x12, 0x21, 0x0a,
	0x1c, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xb2, 0x06,
	0x12, 0x22, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0xb3, 0x06, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55,
	0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xb4, 0x06, 0x12, 0x24, 0x0a, 0x1f, 0x43, 0x4f, 0x4e,
	0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xb5, 0x06, 0x12,
	0x20, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xb6,
	0x06, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0xb7, 0x06, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55,
	0x53, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0xb8, 0x06, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x53, 0x45,
	0x4e, 0x53, 0x55, 0x53, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xb9, 0x06, 0x12, 0x25, 0x0a, 0x20, 0x43,
	0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x48,
	0x45, 0x41, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0xba, 0x06, 0x12, 0x26, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xbb, 0x06, 0x12, 0x24, 0x0a, 0x1f, 0x43, 0x4f,
	0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x50,
	0x45, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x84, 0x07,
	0x12, 0x27, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x85, 0x07, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x4f, 0x4e,
	0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x45,
	0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x86, 0x07, 0x12, 0x1f, 0x0a,
	0x1a, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x59, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x87, 0x07, 0x12, 0x21,
	0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x59, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x88,
	0x07, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x89, 0x07, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e,
	0x53, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x8a, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x4f,
	0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x41,
	0x43, 0x4b, 0x10, 0xe7, 0x07, 0x42, 0x28, 0x0a, 0x15, 0x73, 0x61, 0x77, 0x74, 0x6f, 0x6f, 0x74,
	0x68, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x50, 0x01,
	0x5a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x62, 0x32, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_validator_pb2_validator_proto_rawDescOnce sync.Once
	file_protobuf_validator_pb2_validator_proto_rawDescData = file_protobuf_validator_pb2_validator_proto_rawDesc
)

func file_protobuf_validator_pb2_validator_proto_rawDescGZIP() []byte {
	file_protobuf_validator_pb2_validator_proto_rawDescOnce.Do(func() {
		file_protobuf_validator_pb2_validator_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_validator_pb2_validator_proto_rawDescData)
	})
	return file_protobuf_validator_pb2_validator_proto_rawDescData
}

var file_protobuf_validator_pb2_validator_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protobuf_validator_pb2_validator_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_protobuf_validator_pb2_validator_proto_goTypes = []interface{}{
	(Message_MessageType)(0), // 0: Message.MessageType
	(*MessageList)(nil),      // 1: MessageList
	(*Message)(nil),          // 2: Message
}
var file_protobuf_validator_pb2_validator_proto_depIdxs = []int32{
	2, // 0: MessageList.messages:type_name -> Message
	0, // 1: Message.message_type:type_name -> Message.MessageType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_protobuf_validator_pb2_validator_proto_init() }
func file_protobuf_validator_pb2_validator_proto_init() {
	if File_protobuf_validator_pb2_validator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_validator_pb2_validator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_validator_pb2_validator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_validator_pb2_validator_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobuf_validator_pb2_validator_proto_goTypes,
		DependencyIndexes: file_protobuf_validator_pb2_validator_proto_depIdxs,
		EnumInfos:         file_protobuf_validator_pb2_validator_proto_enumTypes,
		MessageInfos:      file_protobuf_validator_pb2_validator_proto_msgTypes,
	}.Build()
	File_protobuf_validator_pb2_validator_proto = out.File
	file_protobuf_validator_pb2_validator_proto_rawDesc = nil
	file_protobuf_validator_pb2_validator_proto_goTypes = nil
	file_protobuf_validator_pb2_validator_proto_depIdxs = nil
}
